'use strict';

exports.__esModule = true;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('../utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _controlLabel = require('../control-label');

var _controlLabel2 = _interopRequireDefault(_controlLabel);

var _controlWrapper = require('../control-wrapper');

var _controlWrapper2 = _interopRequireDefault(_controlWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propNames = ['id', 'options', 'value', 'onChange', 'label', 'optional', 'aside', 'disabled', 'validationError', 'themeControlSelect', 'themeControlSelectContainer', 'themeControlWrapper', 'themeLabel',
// Passed when used with the Form component
'initialValue', 'validator'];

var ControlSelect = function (_React$Component) {
  (0, _inherits3.default)(ControlSelect, _React$Component);

  function ControlSelect() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ControlSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onChange = function (e) {
      return _this.props.onChange(e.target.value, _this.props.id);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  ControlSelect.prototype.render = function render() {
    var extraProps = (0, _omit2.default)(this.props, propNames);

    var _props = this.props,
        id = _props.id,
        value = _props.value,
        label = _props.label,
        options = _props.options,
        optional = _props.optional,
        aside = _props.aside,
        disabled = _props.disabled,
        validationError = _props.validationError,
        themeControlSelectContainer = _props.themeControlSelectContainer,
        themeControlSelect = _props.themeControlSelect,
        themeControlWrapper = _props.themeControlWrapper,
        themeLabel = _props.themeLabel;


    var selectProps = {
      id: id,
      disabled: disabled,
      value: value,
      className: 'select ' + themeControlSelect,
      onChange: this.onChange,
      'aria-required': optional ? false : true,
      'data-test': id + '-select'
    };

    if (validationError) {
      selectProps['aria-invalid'] = true;
    }

    var renderOptions = function renderOptions(d) {
      if (d.options) {
        return _react2.default.createElement(
          'optgroup',
          { key: d.label, label: d.label },
          d.options.map(renderOptions)
        );
      } else {
        return _react2.default.createElement(
          'option',
          { disabled: d.disabled, key: d.value, value: d.value },
          d.label
        );
      }
    };

    return _react2.default.createElement(
      _controlWrapper2.default,
      {
        id: id,
        themeControlWrapper: themeControlWrapper,
        validationError: validationError
      },
      label && _react2.default.createElement(_controlLabel2.default, {
        text: label,
        id: id,
        aside: aside,
        optional: optional,
        themeLabel: themeLabel
      }),
      _react2.default.createElement(
        'div',
        { className: 'select-container ' + themeControlSelectContainer },
        _react2.default.createElement(
          'select',
          (0, _extends3.default)({}, selectProps, extraProps),
          options.map(renderOptions)
        ),
        _react2.default.createElement('div', { className: 'select-arrow' })
      )
    );
  };

  return ControlSelect;
}(_react2.default.Component);

ControlSelect.propTypes = {
  /** Identifying value for input element. */
  id: _propTypes2.default.string.isRequired,
  /** An array of objects containing `label` `value` key value pairings to represent each option. An optional `disable` key can be provided to disable the selection of an indiviual `<option>`. If `value` is not present but an `options` array is provided containing the same `label` `value` key value pairings, options will be grouped within a `<optgroup>` element as defined by `label` child key. Note that each `label` value must be unique. */
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: function value(props, propName, componentName) {
      if (!props.value && typeof props.value !== 'string' && !props.hasOwnProperty('options')) {
        return new Error('The prop "' + propName + '" is required in ' + componentName + ' if a options array is not provided for select groups.');
      } else if (props.value && typeof props.value !== 'number' && typeof props.value !== 'string') {
        return new Error(props.value + ' of type ' + (0, _typeof3.default)(props.value) + ' supplied to ' + componentName + ', expected a number or string.');
      } else if (props.hasOwnProperty('value') && props.hasOwnProperty('options')) {
        return new Error('You\'ve provided both an \'options\' & \'value\' key to one of your options object groups. Only \'options\' will be used.');
      }
    },
    disabled: _propTypes2.default.bool,
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      label: _propTypes2.default.string.isRequired,
      value: _propTypes2.default.string,
      disabled: _propTypes2.default.bool
    }))
  })).isRequired,
  /** Input value */
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /** Called during changes to the input element. */
  onChange: _propTypes2.default.func.isRequired,
  /** Value passed to the label element. */
  label: _propTypes2.default.string,
  /** If provided the text, "(optional)" is appended to the value of the label element. */
  optional: _propTypes2.default.bool,
  /** Additional content inserted alongside the label element. */
  aside: _propTypes2.default.node,
  /** Pass disabled attribute */
  disabled: _propTypes2.default.bool,
  /** If provided, the value of this propery displays as an error message. */
  validationError: _propTypes2.default.node,
  /** Assembly classes to apply to the select element */
  themeControlSelect: _propTypes2.default.string,
  /** Assembly classes to apply to the select container */
  themeControlSelectContainer: _propTypes2.default.string,
  /** Assembly classes to apply to the control wrapper */
  themeControlWrapper: _propTypes2.default.string,
  /** Assembly classes to apply to the label element */
  themeLabel: _propTypes2.default.string
};
ControlSelect.defaultProps = {
  value: '',
  optional: false,
  disabled: false,
  themeControlSelectContainer: '',
  themeControlSelect: ''
};
exports.default = ControlSelect;