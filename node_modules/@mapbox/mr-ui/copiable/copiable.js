'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _copyButton = require('../copy-button');

var _copyButton2 = _interopRequireDefault(_copyButton);

var _popover = require('../popover');

var _popover2 = _interopRequireDefault(_popover);

var _osKey = require('os-key');

var _osKey2 = _interopRequireDefault(_osKey);

var _select = require('select');

var _select2 = _interopRequireDefault(_select);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DISABLE_CLICK_TO_SELECT_THRESHOLD = 640;
var FEEDBACK_TIME = 2000;

/**
 * Make some text easily copiable.
 *
 * Comes with a [CopyButton](#copybutton) that you can click to automatically
 * copy the text.
 *
 * Also, on wider viewports a click on the text will automatically select it
 * all, so you can easily copy with your favorite keyboard shortcut.
 */

var Copiable = function (_React$Component) {
  (0, _inherits3.default)(Copiable, _React$Component);

  function Copiable(props) {
    (0, _classCallCheck3.default)(this, Copiable);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));

    _this.showCopyTooltip = function () {
      _this.setState({ copyTooltipActive: true }, function () {
        _this.revertTimer = setTimeout(function () {
          _this.setState({ copyTooltipActive: false });
        }, FEEDBACK_TIME);
      });
    };

    _this.setTextEl = function (el) {
      _this.textEl = el;
    };

    _this.getTextEl = function () {
      return _this.textEl;
    };

    _this.handleTextFocus = function () {
      if ((0, _getWindow2.default)().innerWidth < DISABLE_CLICK_TO_SELECT_THRESHOLD) return;
      (0, _select2.default)(_this.getTextEl());
      _this.showCopyTooltip();
    };

    _this.handleTextBlur = function (event) {
      if (!_this.textEl.contains(event.relatedTarget)) {
        _this.setState({ copyTooltipActive: false });
      }
    };

    _this.copyHintText = '';
    _this.state = {
      copyTooltipActive: false,
      showCopyButton: false
    };
    return _this;
  }

  Copiable.prototype.componentDidMount = function componentDidMount() {
    this.setState({
      showCopyButton: typeof window !== 'undefined' && _copyButton2.default.isCopySupported()
    });
  };

  Copiable.prototype.renderCopyHintText = function renderCopyHintText() {
    if (!this.state.showCopyButton) {
      return null;
    }

    return _react2.default.createElement(
      'span',
      null,
      _react2.default.createElement(
        'span',
        { className: 'txt-kbd' },
        getCopyKeys((0, _getWindow2.default)().navigator.userAgent)
      ),
      ' ',
      'to copy'
    );
  };

  Copiable.prototype.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.revertTimer);
  };

  Copiable.prototype.getWindowWidth = function getWindowWidth() {
    return (0, _getWindow2.default)().innerWidth;
  };

  Copiable.prototype.renderCopyButton = function renderCopyButton() {
    var props = this.props,
        state = this.state;


    if (!state.showCopyButton) {
      return null;
    }

    return _react2.default.createElement(
      'div',
      { className: 'absolute top right px6 py6' },
      _react2.default.createElement(_copyButton2.default, { text: props.value, block: true })
    );
  };

  Copiable.prototype.render = function render() {
    var props = this.props;

    var copyButton = this.renderCopyButton();
    var copyHintPopover = this.state.copyTooltipActive && _react2.default.createElement(
      _popover2.default,
      {
        getAnchorElement: this.getTextEl,
        placement: 'top',
        alignment: 'center',
        hideWhenAnchorIsOffscreen: true,
        accessibleTitle: 'Copy the selected text',
        padding: 'small'
      },
      _react2.default.createElement(
        'div',
        { className: 'txt-s' },
        this.renderCopyHintText()
      )
    );

    var textClasses = (0, _classnames2.default)('my3 txt-mono txt-s mr24', {
      'txt-truncate': props.truncated
    });
    var textStyle = {};
    if (!props.truncated) {
      textStyle.wordWrap = 'break-word';
      textStyle.overflowWrap = 'break-word';
    }

    return _react2.default.createElement(
      'div',
      { className: 'relative clearfix bg-darken5 round' },
      copyButton,
      _react2.default.createElement(
        'div',
        {
          tabIndex: '-1',
          ref: this.setTextEl,
          onFocus: this.handleTextFocus,
          onBlur: this.handleTextBlur,
          className: 'py6 px12',
          'data-test': 'copiable-text-el'
        },
        _react2.default.createElement(
          'div',
          { className: textClasses, style: textStyle },
          props.value
        )
      ),
      copyHintPopover
    );
  };

  return Copiable;
}(_react2.default.Component);

exports.default = Copiable;


Copiable.propTypes = {
  /**
   * The text that will be displayed and copied.
   */
  value: _propTypes2.default.string.isRequired,
  /**
   * If `false` (default), the text will be overflow to multiple lines,
   * and words longer than a single line (e.g. long access tokens or URLs)
   * will be broken to enforce wrapping.
   *
   * If `true`, the Copiable's text will be truncated to a single line
   * of text. **Only set this to `true` if you know that your target
   * browsers support the copy button!** Some browsers will not effectively
   * copy text that is truncated by CSS, so the risk is that some of your
   * users might have *no way* to view and copy all the text if the copy
   * button does not work for them.
   *
   * Horizontal scrolling is not an option because of things end up getting
   * pretty gross across browsers.
   */
  truncated: _propTypes2.default.bool
};

Copiable.defaultProps = {
  truncated: false
};

function getCopyKeys(ua) {
  var keys = (0, _osKey2.default)(ua);
  if (!keys) return;
  if (keys.primaryMeta) {
    // âŒ˜+C
    return keys.meta.symbol + '+C';
  } else {
    // Ctrl+C
    return keys.ctrl.abbreviation + '+C';
  }
}