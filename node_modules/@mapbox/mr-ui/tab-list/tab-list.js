'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _popoverTrigger = require('../popover-trigger');

var _popoverTrigger2 = _interopRequireDefault(_popoverTrigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TabList = function (_React$PureComponent) {
  (0, _inherits3.default)(TabList, _React$PureComponent);

  /** If you change propTypes, also change propNames. */
  function TabList(props) {
    (0, _classCallCheck3.default)(this, TabList);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.call(this, props));

    _this.onChange = function (id) {
      var onChange = _this.props.onChange;

      onChange(id);
    };

    _this.handlePopoverOpen = function () {
      _this.setState({ openPopover: true });
    };

    _this.handlePopoverClose = function () {
      _this.setState({ openPopover: false });
    };

    _this.state = { openPopover: false };
    return _this;
  }

  TabList.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        items = _props.items,
        activeItem = _props.activeItem,
        truncateBy = _props.truncateBy,
        themeItem = _props.themeItem,
        themeItemActive = _props.themeItemActive,
        themeItemTruncated = _props.themeItemTruncated,
        themeItemDisabled = _props.themeItemDisabled;


    var renderAllItems = function renderAllItems(item, truncatedClasses) {
      /** The classes that the active item should have. */
      var activeClasses = '';
      if (item.id === activeItem) {
        activeClasses = themeItemActive;
      } else {
        activeClasses = 'border--transparent';
      }
      /** The classes that a disabled item should have. */
      var disabledClasses = '';
      if (item.disabled === true) {
        disabledClasses = themeItemDisabled;
      }
      /** The classes that every item should have. */
      var renderedItemClasses = 'px6 mr24 fl-mm align-center-mm align-l py12 ' + themeItem + ' ' + truncatedClasses + ' ' + activeClasses + ' ' + disabledClasses;
      var renderedItem = null;
      /** If the item contains an href, make a link. */
      if (item.href) {
        renderedItem = _react2.default.createElement(
          'a',
          {
            key: item.id,
            href: item.href,
            className: 'inline-block ' + renderedItemClasses,
            'data-test': item.id
          },
          item.label
        );
        /** If the item does not contain an href, make a button. */
      } else {
        renderedItem = _react2.default.createElement(
          'button',
          {
            key: item.id,
            type: 'button',
            className: renderedItemClasses,
            disabled: item.disabled,
            'data-test': item.id,
            onClick: function onClick() {
              return _this2.onChange(item.id);
            }
          },
          item.label
        );
      }
      return renderedItem;
    };

    /** These are the tab list items that will never be truncated. */
    var alwaysRenderedItems = items.slice(0, truncateBy).map(function (item, index) {
      return _react2.default.createElement(
        'div',
        { key: index, className: 'fl' },
        renderAllItems(item, 'inline-block border-b')
      );
    });

    /** These are the tab list items that will be truncated on narrow screens.
    They should still be rendered as usual on wide screens, and should be hidden
    on narrow screens using `inline-block-mm none`. */
    var sometimesHiddenItems = items.slice(truncateBy, items.length).map(function (item, index) {
      return _react2.default.createElement(
        'div',
        { key: index, className: 'fl' },
        renderAllItems(item, 'inline-block-mm none')
      );
    });

    /** These are the tab list items that will be truncated on narrow screens.
    This is the same content as is in the `sometimesHiddenItems` array, but we _do_
    want to render them on narrow screens, but they should be stacked (`block`) and
    should not have a bottom border (`border-b--0`) when active. */
    var dropdownMenuItems = items.slice(truncateBy, items.length).map(function (item, index) {
      return _react2.default.createElement(
        'div',
        { key: index, className: 'block' },
        renderAllItems(item, themeItemTruncated)
      );
    });

    /** This is the "More +" button that appears on narrow screens and provides
     a popover that contains the `dropdownMenuItems`. */
    var moreButton = _react2.default.createElement(
      'div',
      { className: 'fl' },
      _react2.default.createElement(
        _popoverTrigger2.default,
        {
          content: dropdownMenuItems,
          onPopoverOpen: this.handlePopoverOpen,
          onPopoverClose: this.handlePopoverClose,
          receiveFocus: true,
          respondsToFocus: false,
          respondsToHover: true,
          trapFocus: true,
          popoverProps: {
            placement: 'bottom',
            themePopover: 'round shadow-darken25 h480 scroll-auto px12 py12 scroll-styled'
          },
          triggerProps: {
            'data-test': 'more-dropdown-menu'
          }
        },
        _react2.default.createElement(
          'button',
          {
            className: 'px6 py12 mr12 align-l cursor-pointer none-mm',
            type: 'button'
          },
          'More +'
        )
      )
    );

    return _react2.default.createElement(
      'div',
      { className: 'clearfix' },
      alwaysRenderedItems,
      sometimesHiddenItems,
      moreButton
    );
  };

  return TabList;
}(_react2.default.PureComponent);

TabList.propTypes = {
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    /** Identifying value for tab list item. */
    id: _propTypes2.default.string.isRequired,
    /** The name of the tab to be displayed. */
    label: _propTypes2.default.string.isRequired,
    /** Determines if the state of the tab list item is active. */
    active: _propTypes2.default.bool,
    /** Link to the page the lab list item should take you to when clicked. */
    href: _propTypes2.default.string,
    /** Flag to disable the clickability of an tab list item. */
    disabled: _propTypes2.default.bool
  })).isRequired,
  /** Callback when an tab list header item is clicked.
   Note that this should be a function that is passed an `id` argument. */
  onChange: _propTypes2.default.func,
  /** Value should coorespond to an `id` within the items array. */
  activeItem: _propTypes2.default.string,
  /** Index of the first item in the `items` array that
   should move to the dropdown on narrow screens. */
  truncateBy: _propTypes2.default.number,
  /** CSS classes to apply to the tab list item. */
  themeItem: _propTypes2.default.string,
  /** CSS classes to apply to the active tab list item. */
  themeItemActive: _propTypes2.default.string,
  /** CSS classes to apply to items when they are truncated. */
  themeItemTruncated: _propTypes2.default.string,
  /** CSS classes to apply to the active tab list item. */
  themeItemActivePopover: _propTypes2.default.string,
  /** CSS classes to apply to the tab list item container. */
  themeItemContainer: _propTypes2.default.string,
  /** CSS classes to apply to the tab list item when `disabled` is true */
  themeItemDisabled: _propTypes2.default.string
};
TabList.defaultProps = {
  truncateBy: 2,
  themeItem: 'border-b-mm border-b--2',
  themeItemActive: 'border--blue txt-bold',
  themeItemTruncated: 'border-b--0',
  themeItemActivePopover: 'border-b block',
  themeItemContainer: '',
  themeItemDisabled: 'color-gray-light'
};
exports.default = TabList;