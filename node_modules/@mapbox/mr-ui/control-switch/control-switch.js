'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('../utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _controlWrapper = require('../control-wrapper');

var _controlWrapper2 = _interopRequireDefault(_controlWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propNames = ['id', 'value', 'onChange', 'label', 'optional', 'validationError', 'themeControlSwitchContainer', 'themeControlSwitch', 'themeControlWrapper', 'themeLabel',
// Passed when used with the Form component
'initialValue', 'validator'];

var ControlSwitch = function (_React$Component) {
  (0, _inherits3.default)(ControlSwitch, _React$Component);

  function ControlSwitch() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ControlSwitch);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onChange = function (e) {
      return _this.props.onChange(e.target.checked, _this.props.id);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  ControlSwitch.prototype.render = function render() {
    var extraProps = (0, _omit2.default)(this.props, propNames);

    var _props = this.props,
        id = _props.id,
        value = _props.value,
        label = _props.label,
        validationError = _props.validationError,
        themeControlSwitchContainer = _props.themeControlSwitchContainer,
        themeControlSwitch = _props.themeControlSwitch,
        themeControlWrapper = _props.themeControlWrapper,
        optional = _props.optional,
        themeLabel = _props.themeLabel;

    // value might be an empty string. Form will do this if no initialValue
    // is set.

    var checked = value === '' ? false : value;

    var inputProps = {
      id: id,
      checked: checked,
      onChange: this.onChange,
      type: 'checkbox',
      'data-test': id + '-input'
    };

    if (validationError) {
      inputProps['aria-invalid'] = true;
    }

    return _react2.default.createElement(
      _controlWrapper2.default,
      {
        themeControlWrapper: themeControlWrapper,
        id: id,
        validationError: validationError
      },
      _react2.default.createElement(
        'label',
        { className: 'switch-container ' + themeControlSwitchContainer },
        _react2.default.createElement('input', (0, _extends3.default)({}, inputProps, extraProps)),
        _react2.default.createElement('div', { className: 'switch ' + themeControlSwitch }),
        _react2.default.createElement(
          'span',
          { className: themeLabel },
          label,
          optional && _react2.default.createElement(
            'span',
            { className: 'ml3 txt-normal' },
            '(optional)'
          )
        )
      )
    );
  };

  return ControlSwitch;
}(_react2.default.Component);

ControlSwitch.propTypes = {
  /** Identifying value for input element. */
  id: _propTypes2.default.string.isRequired,
  /** Input value */
  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf([''])]),
  /** If provided the text, "(optional)" is appended to the value of the label element. */
  optional: _propTypes2.default.bool,
  /** Called during changes to the input element. */
  onChange: _propTypes2.default.func.isRequired,
  /** Value passed to the label element. */
  label: _propTypes2.default.node,
  /** If provided, the value of this propery displays as an error message. */
  validationError: _propTypes2.default.node,
  /** Assembly classes to apply to the switch container */
  themeControlSwitchContainer: _propTypes2.default.string,
  /** Assembly classes to apply to the switch element */
  themeControlSwitch: _propTypes2.default.string,
  /** Assembly classes to apply to the control wrapper */
  themeControlWrapper: _propTypes2.default.string,
  /** Assembly classes to apply to the label element */
  themeLabel: _propTypes2.default.string
};
ControlSwitch.defaultProps = {
  value: false,
  themeControlSwitchContainer: '',
  themeControlSwitch: 'switch--s-label',
  optional: false,
  themeLabel: 'txt-s ml6'
};
exports.default = ControlSwitch;