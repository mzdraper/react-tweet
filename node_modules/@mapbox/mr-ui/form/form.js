'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _xtend = require('xtend');

var _xtend2 = _interopRequireDefault(_xtend);

var _objects = require('shallow-equal/objects');

var _objects2 = _interopRequireDefault(_objects);

var _reactSubmittable = require('react-submittable');

var _reactSubmittable2 = _interopRequireDefault(_reactSubmittable);

var _loaderFull = require('../loader-full');

var _loaderFull2 = _interopRequireDefault(_loaderFull);

var _loaderLocal = require('../loader-local');

var _loaderLocal2 = _interopRequireDefault(_loaderLocal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validateControlValue(value, validators, controlValues) {
  if (!validators) return '';

  if (!Array.isArray(validators)) {
    validators = [validators];
  }

  for (var i = 0, l = validators.length; i < l; i++) {
    var errorMessage = validators[i](value, controlValues);
    if (errorMessage) {
      return errorMessage;
    }
  }
  return '';
}

var formStates = {
  preSubmission: 'PRE_SUBMISSION',
  errorSubmission: 'SUBMITTED_WITH_ERRORS',
  pendingSubmission: 'PENDING',
  completeSubmission: 'COMPLETE'
};

var Form = function (_React$Component) {
  (0, _inherits3.default)(Form, _React$Component);

  Form.prototype.setControlProperties = function setControlProperties(config) {
    var _this2 = this;

    var controlValues = {};
    var controlValidationErrors = {};

    Object.keys(config).forEach(function (controlName) {
      var controlConfig = config[controlName];
      if (_this2.state && _this2.state.controlValues && _this2.state.controlValues[controlName]) {
        controlValues[controlName] = _this2.state.controlValues[controlName];
      } else {
        controlValues[controlName] = controlConfig.initialValue !== undefined ? controlConfig.initialValue : '';
      }

      controlValidationErrors[controlName] = '';
    });

    return {
      controlValues: controlValues,
      controlValidationErrors: controlValidationErrors
    };
  };

  function Form(props) {
    (0, _classCallCheck3.default)(this, Form);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));

    _this._isMounted = false;

    _this.onControlChange = function (controlValue, controlName) {
      var controlValues = _this.state.controlValues;
      controlValues[controlName] = controlValue;
      if (_this.state.formState !== formStates.preSubmission) {
        _this.checkValidation(formStates.preSubmission).then(function () {
          _this.setState({ controlValues: controlValues });
        });
      } else {
        _this.setState({ controlValues: controlValues });
      }

      if (_this.props.onChange) _this.props.onChange(controlValues);
    };

    _this.getControlProps = function (controlName) {
      var control = _this.props.config[controlName];
      return (0, _xtend2.default)(control, {
        id: controlName,
        onChange: _this.onControlChange,
        validationError: _this.state.controlValidationErrors[controlName],
        value: _this.state.controlValues[controlName]
      });
    };

    _this.onSubmit = function () {
      _this.checkValidation(formStates.pendingSubmission).then(function () {
        if (_this.state.formState === formStates.pendingSubmission) _this.submitForm();
      });
    };

    _this.submitForm = function () {
      // Use Promise.resolve, because if handleFormData is a promise,
      // we want to handle loading and error states.
      Promise.resolve(_this.props.handleFormData(_this.state.controlValues)).then(function () {
        if (!_this._isMounted) return;
        if (_this.state.formState === formStates.pendingSubmission) {
          _this.setState({ formState: formStates.completeSubmission });
        }
      }).catch(function (err) {
        if (!_this._isMounted) return;
        if (_this.state.formState === formStates.pendingSubmission) {
          _this.setState({ formState: formStates.completeSubmission });
        }
        console.error(err);
      });
    };

    _this.state = (0, _xtend2.default)(_this.setControlProperties(props.config), {
      formState: formStates.preSubmission,
      ready: false
    });
    return _this;
  }

  Form.prototype.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    this.setState({
      ready: true
    });
  };

  Form.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var config = this.props.config;

    if (!(0, _objects2.default)(nextProps.config, config)) {
      var _setControlProperties = this.setControlProperties(nextProps.config),
          controlValues = _setControlProperties.controlValues,
          controlValidationErrors = _setControlProperties.controlValidationErrors;

      this.setState({
        controlValues: controlValues,
        controlValidationErrors: controlValidationErrors,
        formState: formStates.preSubmission
      });
    }
  };

  Form.prototype.componentWillUnmount = function componentWillUnmount() {
    this._isMounted = false;
  };

  Form.prototype.checkValidation = function checkValidation(formState) {
    var _this3 = this;

    return new Promise(function (resolve) {
      var controlValidationErrors = _this3.state.controlValidationErrors;

      Object.keys(_this3.state.controlValues).forEach(function (controlName) {
        var errorMessage = validateControlValue(_this3.state.controlValues[controlName], _this3.props.config[controlName].validator, _this3.state.controlValues);
        if (errorMessage) {
          controlValidationErrors[controlName] = errorMessage;
          formState = formStates.errorSubmission;
        } else {
          controlValidationErrors[controlName] = '';
        }
      });

      _this3.setState({
        controlValidationErrors: controlValidationErrors,
        formState: formState
      }, function () {
        resolve();
      });
    });
  };

  Form.prototype.render = function render() {
    var onCancel = this.props.onCancel;

    var formProps = {
      onEnter: this.onSubmit,
      noValidate: true
    };

    if (onCancel) formProps.onCancel = onCancel;

    return _react2.default.createElement(
      'div',
      { className: 'relative' },
      _react2.default.createElement(
        _reactSubmittable2.default,
        formProps,
        this.props.renderForm(this.getControlProps, this.onSubmit)
      ),
      this.state.formState === formStates.pendingSubmission && _react2.default.createElement(_loaderFull2.default, null),
      !this.state.ready && _react2.default.createElement(_loaderLocal2.default, null)
    );
  };

  return Form;
}(_react2.default.Component);

Form.propTypes = {
  /** An object containing keys that correspond to control names. The value of each control name key are objects containing the configuration of a control. */
  config: _propTypes2.default.object.isRequired,
  /** Renders the form layout. When called a get argument is passed to return the configuration object of each control type. */
  renderForm: _propTypes2.default.func.isRequired,
  /** Called when the form has successfully passed validation and returns an object containing keys the coorespond to control names with values equalling the users inputted value. */
  handleFormData: _propTypes2.default.func.isRequired,
  /** Called when any control component registered with the form changes in value. */
  onChange: _propTypes2.default.func,
  /** Called when ESC is pressed. */
  onCancel: _propTypes2.default.func
};
exports.default = Form;