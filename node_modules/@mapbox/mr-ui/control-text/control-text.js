'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('../utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _controlLabel = require('../control-label');

var _controlLabel2 = _interopRequireDefault(_controlLabel);

var _controlWrapper = require('../control-wrapper');

var _controlWrapper2 = _interopRequireDefault(_controlWrapper);

var _popover = require('../popover');

var _popover2 = _interopRequireDefault(_popover);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propNames = ['id', 'value', 'onChange', 'type', 'label', 'noAuto', 'optional', 'aside', 'validationError', 'errorStyle', 'errorTooltipTheme', 'errorTooltipBackgroundColor', 'themeControlInput', 'themeControlWrapper', 'themeLabel',
// Passed when used with the Form component
'initialValue', 'validator'];

var ControlText = function (_React$Component) {
  (0, _inherits3.default)(ControlText, _React$Component);

  function ControlText(props) {
    (0, _classCallCheck3.default)(this, ControlText);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));

    _this.inputElement = null;
    _this.errorElement = null;

    _this.onChange = function (e) {
      return _this.props.onChange(e.target.value, _this.props.id);
    };

    _this.setInputElement = function (el) {
      _this.inputElement = el;
    };

    _this.setErrorElement = function (el) {
      _this.errorElement = el;
    };

    _this.getErrorElement = function () {
      return _this.errorElement;
    };

    _this.onErrorClick = function () {
      if (_this.inputElement) _this.inputElement.select();
    };

    _this.onFocus = function () {
      _this.setState({ popoverOpen: true });
    };

    _this.onBlur = function () {
      _this.setState({ popoverOpen: false });
    };

    _this.isActive = function () {
      return (0, _getWindow2.default)().document.activeElement === _this.inputElement || (0, _getWindow2.default)().document.activeElement === _this.errorElement;
    };

    _this.onContainerMouseOver = function () {
      if (_this.isActive()) return;
      _this.setState({ popoverOpen: true });
    };

    _this.onContainerMouseOut = function () {
      if (_this.isActive()) return;
      _this.setState({ popoverOpen: false });
    };

    _this.renderLabel = function () {
      var _this$props = _this.props,
          id = _this$props.id,
          label = _this$props.label,
          optional = _this$props.optional,
          aside = _this$props.aside,
          themeLabel = _this$props.themeLabel;


      return _react2.default.createElement(_controlLabel2.default, {
        text: label,
        id: id,
        aside: aside,
        optional: optional,
        themeLabel: themeLabel
      });
    };

    _this.renderPopover = function () {
      var _this$props2 = _this.props,
          validationError = _this$props2.validationError,
          errorTooltipTheme = _this$props2.errorTooltipTheme,
          errorTooltipBackgroundColor = _this$props2.errorTooltipBackgroundColor;


      var popoverProps = {
        getAnchorElement: _this.getErrorElement,
        placement: 'top',
        receiveFocus: false,
        accessibleTitle: 'Validation error'
      };

      if (errorTooltipBackgroundColor) {
        popoverProps.backgroundColor = errorTooltipBackgroundColor;
      }

      if (errorTooltipTheme) {
        popoverProps.themePopover = errorTooltipTheme;
      }

      return _react2.default.createElement(
        _popover2.default,
        popoverProps,
        validationError
      );
    };

    _this.state = {
      popoverOpen: false
    };
    return _this;
  }

  ControlText.prototype.render = function render() {
    var extraProps = (0, _omit2.default)(this.props, propNames);

    var _props = this.props,
        id = _props.id,
        value = _props.value,
        label = _props.label,
        type = _props.type,
        optional = _props.optional,
        validationError = _props.validationError,
        errorStyle = _props.errorStyle,
        noAuto = _props.noAuto,
        themeControlInput = _props.themeControlInput,
        themeControlWrapper = _props.themeControlWrapper;
    var popoverOpen = this.state.popoverOpen;


    var inputProps = {
      id: id,
      name: id,
      onChange: this.onChange,
      value: value,
      type: type,
      className: themeControlInput,
      'aria-required': optional ? false : true,
      'data-test': id + '-input'
    };

    if (noAuto) {
      inputProps.autoCapitalize = 'none';
      inputProps.autoCorrect = 'off';
      inputProps.spellCheck = false;
    }

    if (validationError) {
      inputProps['aria-invalid'] = true;
    }

    if (validationError && errorStyle === 'inline') {
      inputProps.className = themeControlInput + ' round-l flex-child flex-child--grow';
      inputProps.style = {
        boxShadow: 'inset 0 0 0 1px #f74e4e'
      };
    }

    var labelElement = label ? this.renderLabel() : null;

    var popover = popoverOpen ? this.renderPopover() : null;

    var control = _react2.default.createElement('input', (0, _extends3.default)({}, inputProps, extraProps));

    if (errorStyle === 'inline') {
      if (validationError) {
        control = _react2.default.createElement(
          'div',
          {
            onMouseOver: this.onContainerMouseOver,
            onMouseOut: this.onContainerMouseOut,
            'data-test': 'control-text-container',
            className: 'flex-parent'
          },
          _react2.default.createElement('input', (0, _extends3.default)({
            ref: this.setInputElement,
            onFocus: this.onFocus,
            onBlur: this.onBlur
          }, inputProps, extraProps)),
          _react2.default.createElement(
            'button',
            {
              type: 'button',
              onFocus: this.onFocus,
              onBlur: this.onBlur,
              ref: this.setErrorElement,
              onClick: this.onErrorClick,
              role: 'alert',
              'aria-label': validationError,
              className: 'flex-child bg-red color-white round-r px6'
            },
            _react2.default.createElement(
              'span',
              { className: 'flex-parent flex-parent--center-cross flex-parent--center-main' },
              _react2.default.createElement(_icon2.default, { name: 'alert', themeIcon: 'cursor-pointer' })
            )
          )
        );
      }

      return _react2.default.createElement(
        _controlWrapper2.default,
        { themeControlWrapper: themeControlWrapper, id: id },
        labelElement,
        control,
        popover
      );
    }

    return _react2.default.createElement(
      _controlWrapper2.default,
      {
        themeControlWrapper: themeControlWrapper,
        id: id,
        validationError: validationError
      },
      labelElement,
      control
    );
  };

  return ControlText;
}(_react2.default.Component);

ControlText.propTypes = {
  /** Unique id for this control. Required if you want a `label`. */
  id: _propTypes2.default.string.isRequired,
  /**
   * Invoked when the control's value changes.
   * Passed two arguments:
   *
   * - `value` the current value of the input passes as a string
   * - The `id` prop.
   */
  onChange: _propTypes2.default.func.isRequired,
  /** The control's value. Can be an empty string to indicate no value. */
  value: _propTypes2.default.string,
  /** Type attribute to override the existing default of 'text' */
  type: _propTypes2.default.string,
  /** Label for the control. */
  label: _propTypes2.default.string,
  /** Enable/Disable browser enabled autocorrect or spelling suggestions from the element. */
  noAuto: _propTypes2.default.bool,
  /** If provided, "(optional)" is appended to the value of the legend element. */
  optional: _propTypes2.default.bool,
  /** Additional content inserted alongside the label element. */
  aside: _propTypes2.default.node,
  /** If provided, the value of this propery displays as an error message. */
  validationError: _propTypes2.default.node,
  /**
   * Sets the style of the error message. There are two options:
   *
   * - `default` the standard presentation control components display an error
   *   message: beneath the input.
   * - `inline` An error indicator is displayed to the right of the element
   *   with the value of `validationError` prop displayed in a tooltip.
   */
  errorStyle: _propTypes2.default.oneOf(['default', 'inline']),
  /** Background color of the error tooltip when `errorStyle: "inline"` is set. */
  errorTooltipBackgroundColor: _propTypes2.default.string,
  /** Classes to style the error tooltip container. */
  errorTooltipTheme: _propTypes2.default.string,
  /** Classes to apply to the input element */
  themeControlInput: _propTypes2.default.string,
  /** Classes to apply to the control wrapper */
  themeControlWrapper: _propTypes2.default.string,
  /** classes to apply to the label element */
  themeLabel: _propTypes2.default.string
};
ControlText.defaultProps = {
  value: '',
  type: 'text',
  optional: false,
  noAuto: false,
  errorStyle: 'default',
  themeControlInput: 'input'
};
exports.default = ControlText;