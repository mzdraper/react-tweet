'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _copyButton = require('../copy-button');

var _copyButton2 = _interopRequireDefault(_copyButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTheme = '\n.hljs-comment,\n.hljs-quote {\n  color: #7285b7;\n}\n\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag,\n.hljs-name,\n.hljs-selector-id,\n.hljs-selector-class,\n.hljs-regexp,\n.hljs-deletion {\n  color: #ff9da4;\n}\n\n.hljs-number,\n.hljs-built_in,\n.hljs-builtin-name,\n.hljs-literal,\n.hljs-type,\n.hljs-params,\n.hljs-meta,\n.hljs-link {\n  color: #ffc58f;\n}\n\n.hljs-attribute {\n  color: #ffeead;\n}\n\n.hljs-string,\n.hljs-symbol,\n.hljs-bullet,\n.hljs-addition {\n  color: #d1f1a9;\n}\n\n.hljs-title,\n.hljs-section {\n  color: #bbdaff;\n}\n\n.hljs-keyword,\n.hljs-selector-tag {\n  color: #ebbbff;\n}\n\n.hljs {\n  display: block;\n  font-family: \'Menlo\', \'Bitstream Vera Sans Mono\', \'Monaco\', \'Consolas\', monospace;\n  font-size: 12px;\n  line-height: 1.5em;\n  overflow-x: auto;\n  background: #273d56;\n  color: #fff;\n  padding: 12px;\n  border-radius: 3px;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}';

// Theme cache, used to prevent the creation of multiple <style> elements with the same content.
var injectedThemes = [];

var CodeSnippet = function (_React$PureComponent) {
  (0, _inherits3.default)(CodeSnippet, _React$PureComponent);

  function CodeSnippet() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CodeSnippet);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.adjustPositions = (0, _debounce2.default)(function () {
      var _this2 = _this,
          containerElement = _this2.containerElement;

      if (!containerElement) return;

      var chunkOverlays = containerElement.querySelectorAll('[data-chunk-overlay]');
      for (var i = 0, l = chunkOverlays.length; i < l; i++) {
        var overlayElement = chunkOverlays[i];
        var chunkId = overlayElement.getAttribute('data-chunk-overlay');
        var codeElement = containerElement.querySelector('[data-chunk-code="' + chunkId + '"]');
        if (!codeElement) throw new Error('No code element found with [data-chunk-code="' + chunkId + '"]');
        var copyElement = containerElement.querySelector('[data-chunk-copy="' + chunkId + '"]');
        if (!copyElement) throw new Error('No copy element found with [data-chunk-copy="' + chunkId + '"]');

        overlayElement.style.top = codeElement.offsetTop + 'px';
        copyElement.style.top = codeElement.offsetTop + 2 + 'px';
        overlayElement.style.height = codeElement.clientHeight + 'px';

        // Since these elements move into position a split-second after the component
        // mounts and renders, we'll fade them in after they're positioned
        overlayElement.style.opacity = '1';
        copyElement.style.opacity = '1';
      }
    }, 300), _this.onContainerElement = function (element) {
      _this.containerElement = element;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  CodeSnippet.prototype.componentDidMount = function componentDidMount() {
    this.adjustPositions();
    (0, _getWindow2.default)().addEventListener('resize', this.adjustPositions);

    var theme = this.props.highlightThemeCss;

    // Do not load themes that have already been injected.
    if (injectedThemes.indexOf(theme) !== -1) return;
    injectedThemes.push(theme);
    var doc = (0, _getWindow2.default)().document;
    this.styleTag = doc.createElement('style');
    this.styleTag.innerHTML = theme;
    doc.head.appendChild(this.styleTag);
  };

  CodeSnippet.prototype.componentDidUpdate = function componentDidUpdate() {
    this.adjustPositions();
  };

  CodeSnippet.prototype.componentWillUnmount = function componentWillUnmount() {
    (0, _getWindow2.default)().removeEventListener('resize', this.adjustPositions);
  };

  CodeSnippet.prototype.render = function render() {
    var _this3 = this;

    var props = this.props;


    var rawCodeLines = props.code.trim().split('\n');
    // If highlightedCode is not provided, show raw code.
    var displayCode = props.highlightedCode || props.code;
    var splitDisplayCode = displayCode.trim().split('\n');

    // Use copyRanges to split the highlighted code into chunks,
    // some of which are "live", i.e. copyable, some which are not.
    // If there are no copyRanges, the whole snippet is copyable and there
    // is no fancy live-chunk styling.
    var mutableCopyRanges = props.copyRanges !== undefined && props.copyRanges.slice();
    var currentLiveRange = mutableCopyRanges && mutableCopyRanges.shift();
    var currentChunk = [];
    var allChunks = [];
    var endCurrentChunk = function endCurrentChunk(_ref) {
      var live = _ref.live;

      allChunks.push({
        live: live,
        highlightedLines: currentChunk.map(function (line) {
          return line.highlighted;
        }),
        raw: currentChunk.reduce(function (result, line) {
          return result += line.raw + '\n';
        }, ''),
        element: undefined
      });
      currentChunk = [];
    };
    for (var i = 0, l = splitDisplayCode.length; i < l; i++) {
      var chunk = splitDisplayCode[i];
      var lineNumber = i + 1;
      if (currentLiveRange && lineNumber === currentLiveRange[0]) {
        endCurrentChunk({ live: false });
      } else if (currentLiveRange && lineNumber > currentLiveRange[1]) {
        endCurrentChunk({ live: true });
        currentLiveRange = mutableCopyRanges && mutableCopyRanges.shift();
      }
      currentChunk.push({
        highlighted: chunk,
        raw: rawCodeLines[i]
      });
    }
    if (currentChunk.length) {
      endCurrentChunk({ live: false });
    }

    var codeElements = [];
    var highlightElements = [];
    var copyElements = [];

    var liveChunkCount = -1; // Incremented to give CopyButtons an identifier
    allChunks.forEach(function (codeChunk, i) {
      var chunkId = 'chunk-' + i;

      var lineEls = codeChunk.highlightedLines.map(function (line, i) {
        // Left padding is determined below
        var lineClasses = 'pr12';
        if (codeChunk.live) lineClasses += ' py3';
        if (!codeChunk.live && props.copyRanges !== undefined) lineClasses += ' opacity75';

        // Remove leading spaces, which are replaced with padding to avoid
        // weird behaviors that occur when there are long unbroken strings:
        // a line break might be introduced between the leading spaces and the
        // long word, creating an empty line that nobody wanted.
        var indentingSpacesMatch = line.match(/^[ ]*/);
        var indentingSpaces = indentingSpacesMatch ? indentingSpacesMatch[0] : '';
        var indentingSpacesCount = indentingSpaces.length;
        var paddingLeft = indentingSpacesCount * props.characterWidth + 12;
        var displayLine = line.replace(/^[ ]*/, '');

        /* eslint-disable react/no-danger */
        return _react2.default.createElement(
          'div',
          { key: i, className: lineClasses, style: { paddingLeft: paddingLeft } },
          _react2.default.createElement('div', {
            // We must use dangerouslySetInnerHTML because we've already
            // highlighted the code with lowlight, so we have an HTML string
            dangerouslySetInnerHTML: { __html: displayLine || ' ' }
            // Super fancy hanging indent
            , style: {
              textIndent: -2 * props.characterWidth,
              marginLeft: 2 * props.characterWidth
            }
          })
        );
        /* eslint-enable react/no-danger */
      });

      codeElements.push(_react2.default.createElement(
        'div',
        {
          key: i
          // z-index this line above the highlighted background element for
          // live chunks
          , className: 'relative z2',
          'data-chunk-code': chunkId
        },
        lineEls
      ));

      if (codeChunk.live) {
        highlightElements.push(_react2.default.createElement(
          'div',
          {
            key: i,
            'data-chunk-overlay': chunkId,
            className: 'bg-darken75 absolute left right',
            style: { opacity: 0, transition: 'opacity 300ms linear' }
          },
          _react2.default.createElement('div', { className: 'bg-blue h-full w6' })
        ));

        var chunkIndex = ++liveChunkCount;
        var onCopyChunk = function onCopyChunk() {
          return _this3.props.onCopy(chunkIndex);
        };

        if (props.onCopy) {
          copyElements.push(_react2.default.createElement(
            'div',
            {
              key: i,
              'data-chunk-copy': chunkId,
              className: 'absolute z3 right mr3 color-white',
              style: { opacity: 0, transition: 'opacity 300ms linear' }
            },
            _react2.default.createElement(_copyButton2.default, { text: codeChunk.raw, onCopy: onCopyChunk })
          ));
        }
      }
    });

    // Prevent the default x-axis padding because each line pads itself
    var codeClasses = 'px0 hljs';

    var copyAllButton = null;
    if (props.copyRanges === undefined && props.onCopy) {
      copyAllButton = _react2.default.createElement(
        'div',
        { className: 'absolute z2 top right mr6 mt6 color-white' },
        _react2.default.createElement(_copyButton2.default, { text: props.code, onCopy: props.onCopy })
      );
    }

    var containerClasses = 'relative round z0 scroll-styled';
    if (props.maxHeight !== undefined) containerClasses += ' scroll-auto';

    var containerStyles = {};
    if (props.maxHeight !== undefined) containerStyles.maxHeight = props.maxHeight;

    return _react2.default.createElement(
      'div',
      {
        className: containerClasses,
        ref: this.onContainerElement,
        style: containerStyles
      },
      _react2.default.createElement(
        'pre',
        null,
        _react2.default.createElement(
          'code',
          { className: codeClasses },
          codeElements
        )
      ),
      copyAllButton,
      highlightElements,
      copyElements
    );
  };

  return CodeSnippet;
}(_react2.default.PureComponent);

CodeSnippet.propTypes = {
  /** Raw (unhighlighted) code. When the user clicks a copy button, this is what they'll get. If no `highlightedCode` is provided, `code` is displayed. */
  code: _propTypes2.default.string.isRequired,
  /** The HTML output of running code through a syntax highlighter. If this is not provided, `code` is displayed, instead. The default theme CSS assumes the highlighter is [`highlight.js`](https://github.com/isagalaev/highlight.js). If you are using another highlighter, provide your own theme. */
  highlightedCode: _propTypes2.default.string,
  /** Specific line ranges that should be independently copiable. Each range is a two-value array, consisting of the starting and ending line. If this is not provided, the entire snippet is copiable. */
  copyRanges: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.number)),
  /** A maximum height for the snippet. If the code exceeds this height, the snippet will scroll internally. */
  maxHeight: _propTypes2.default.number,
  /** A callback that is invoked when the snippet (or a chunk of the snippet) is copied. If `copyRanges` are provided, the callback is passed the index (0-based) of the chunk that was copied. */
  onCopy: _propTypes2.default.func,
  /** CSS that styles the highlighted code. The default theme is a [`highlight.js` theme](https://highlightjs.readthedocs.io/en/latest/style-guide.html#defining-a-theme) theme. It is the dark theme used on mapbox.com's installation flow. */
  highlightThemeCss: _propTypes2.default.string,
  /** The width of a character in the theme's monospace font, used for indentation. If you use a font or font-size different than the default theme, you may need to change this value. */
  characterWidth: _propTypes2.default.number
};
CodeSnippet.defaultProps = {
  characterWidth: 7.225, // Will need to change this if we change font size
  highlightThemeCss: defaultTheme
};
exports.default = CodeSnippet;