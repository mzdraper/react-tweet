'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('../utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _controlLegend = require('../control-legend');

var _controlLegend2 = _interopRequireDefault(_controlLegend);

var _controlWrapper = require('../control-wrapper');

var _controlWrapper2 = _interopRequireDefault(_controlWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ControlToggleSet = function (_React$Component) {
  (0, _inherits3.default)(ControlToggleSet, _React$Component);

  function ControlToggleSet() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ControlToggleSet);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onChange = function (e) {
      return _this.props.onChange(e.target.value, _this.props.id);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  ControlToggleSet.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        id = _props.id,
        value = _props.value,
        legend = _props.legend,
        options = _props.options,
        optional = _props.optional,
        aside = _props.aside,
        autoFocus = _props.autoFocus,
        validationError = _props.validationError,
        themeToggleGroup = _props.themeToggleGroup,
        themeToggleContainer = _props.themeToggleContainer,
        themeToggle = _props.themeToggle,
        themeControlWrapper = _props.themeControlWrapper,
        themeLegend = _props.themeLegend;


    var groupProps = {
      id: id,
      className: 'toggle-group round-full ' + themeToggleGroup,
      role: 'radiogroup',
      'aria-required': optional ? false : true,
      'data-test': id + '-input'
    };

    if (validationError) {
      groupProps['aria-invalid'] = true;
    }

    var renderOptions = function renderOptions(d) {
      var extraProps = (0, _omit2.default)(d, ['value', 'label']);
      return _react2.default.createElement(
        'label',
        {
          key: d.value,
          className: 'toggle-container ' + themeToggleContainer
        },
        _react2.default.createElement('input', (0, _extends3.default)({
          value: d.value,
          checked: d.value === value,
          autoFocus: autoFocus && d.value === value,
          onChange: _this2.onChange,
          name: id,
          type: 'radio'
        }, extraProps)),
        _react2.default.createElement(
          'div',
          { className: themeToggle + ' toggle' },
          d.label
        )
      );
    };

    return _react2.default.createElement(
      _controlWrapper2.default,
      {
        themeControlWrapper: themeControlWrapper,
        id: id,
        validationError: validationError
      },
      _react2.default.createElement(
        'fieldset',
        null,
        legend && _react2.default.createElement(_controlLegend2.default, {
          text: legend,
          id: id,
          aside: aside,
          optional: optional,
          themeLegend: themeLegend
        }),
        _react2.default.createElement(
          'div',
          groupProps,
          options.map(renderOptions)
        )
      )
    );
  };

  return ControlToggleSet;
}(_react2.default.Component);

ControlToggleSet.propTypes = {
  /** Identifying value for input element. */
  id: _propTypes2.default.string.isRequired,
  /** Function that's called when text changes in the input element. Argument that's returned the id prop and value entered. */
  onChange: _propTypes2.default.func.isRequired,
  /** An array of objects containing `label` `value` key value pairings to represent each option. Any additional keys are passed as props to the input. */
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.node.isRequired,
    value: _propTypes2.default.string.isRequired
  })).isRequired,
  /** Legend name */
  legend: _propTypes2.default.string,
  /** input value */
  value: _propTypes2.default.string,
  /** If provided, "(optional)" is appended to the value of the legend element. */
  optional: _propTypes2.default.bool,
  /** Additional content inserted alongside the legend element. */
  aside: _propTypes2.default.node,
  /** Add auto focus attributes. */
  autoFocus: _propTypes2.default.bool,
  /** If provided, the value of this propery displays as an error message. */
  validationError: _propTypes2.default.node,
  /** Assembly classes to apply to the toggle group */
  themeToggleGroup: _propTypes2.default.string,
  /** Assembly classes to apply to the toggle container */
  themeToggleContainer: _propTypes2.default.string,
  /** Assembly classes to apply to the toggle element */
  themeToggle: _propTypes2.default.string,
  /** Assembly classes to apply to the control wrapper */
  themeControlWrapper: _propTypes2.default.string,
  /** Assembly classes to apply to the legend element */
  themeLegend: _propTypes2.default.string
};
ControlToggleSet.defaultProps = {
  value: '',
  optional: false,
  autoFocus: false,
  themeToggleGroup: 'border border--2 border--blue bg-blue',
  themeToggleContainer: '',
  themeToggle: 'txt-s py3 toggle--white toggle--active-blue'
};
exports.default = ControlToggleSet;