'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _shallowEqualObjects = require('../utils/shallow-equal-objects');

var _shallowEqualObjects2 = _interopRequireDefault(_shallowEqualObjects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Display an Assembly icon.
 *
 * Besides providing a convenient shortcut, this component does the following:
 *
 * - Sets some accessibility props.
 * - Provides an `inline` mode that automatically sizes icons to match their
 *   surrounding text.
 */
var Icon = function (_React$Component) {
  (0, _inherits3.default)(Icon, _React$Component);

  function Icon() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Icon);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.setIconElement = function (element) {
      _this.iconElement = element;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  Icon.prototype.componentDidMount = function componentDidMount() {
    this.setHeight();
  };

  Icon.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return !(0, _shallowEqualObjects2.default)(this.props, nextProps, ['passthroughProps']);
  };

  Icon.prototype.componentDidUpdate = function componentDidUpdate() {
    this.setHeight();
  };

  Icon.prototype.setHeight = function setHeight() {
    if (this.props.inline && this.iconElement) {
      var lineHeight = (0, _getWindow2.default)().getComputedStyle(this.iconElement)['line-height'];
      this.iconElement.style.height = lineHeight;
    }
  };

  Icon.prototype.render = function render() {
    var props = this.props;


    var iconClasses = 'events-none icon';
    if (props.inline) {
      iconClasses += ' inline-block align-t';
    }

    var svgStyle = props.passthroughProps.style || {};
    if (!svgStyle.width && props.size) {
      svgStyle.width = props.size;
    }
    if (!svgStyle.height && props.size) {
      svgStyle.height = props.size;
    }

    var iconContent = _react2.default.createElement(
      'svg',
      (0, _extends3.default)({
        ref: this.setIconElement,
        role: 'presentation',
        focusable: 'false',
        className: iconClasses
      }, props.passthroughProps, {
        style: svgStyle
      }),
      _react2.default.createElement('use', {
        xmlnsXlink: 'http://www.w3.org/1999/xlink',
        xlinkHref: '#icon-' + props.name
      })
    );

    return iconContent;
  };

  return Icon;
}(_react2.default.Component);

exports.default = Icon;


Icon.propTypes = {
  /**
   * The name of the [Assembly icon](https://www.mapbox.com/assembly/icons/) that
   * you want to display.
   */
  name: _propTypes2.default.string.isRequired,
  /**
   * The width and height of the icon. All icons fill up a square space,
   * so this value will be applied to both width and height.
   *
   * If `inline: true`, the technical height will be controlled by the
   * line-height of the container, but the appearance of the icon will still
   * be in accordance with your `size` value (because it's limited by the
   * width).
   */
  size: _propTypes2.default.number,
  /**
   * If `true`, the icon will be adjusted after mounting so that its height
   * matches the line-height of its container. The result of this is that
   * the icon will not displace the text's established line-height and
   * will be vertically centered with the text alongside it.
   *
   * This is most useful when you are inserting the icon within multiline text,
   * so you can't use a flexbox layout to vertically center the icon and text.
   *
   * Be aware that there are edge cases that can cause problems with this
   * setting. For example, it won't work well if you don't have a `line-height`
   * set to a pixel value, or if there are dynamic adjustments to the
   * line-height.
   */
  inline: _propTypes2.default.bool,
  /**
   * Props to pass directly to the `<svg>` element.
   */
  passthroughProps: _propTypes2.default.object
};

Icon.defaultProps = {
  inline: false,
  passthroughProps: {},
  size: 18
};