'use strict';

exports.__esModule = true;
exports.default = calculatePlacementAlignment;

var _constants = require('./constants');

/**
 * @param {Object} options - See definition in calculatePosition
 * @param {PopoverPositionContext} context - See definition in calculatePositionContext
 * @return {{ placement: string, alignment: string }}
 */
function calculatePlacementAlignment(options, context) {
  var desiredPlacement = options.placement;
  var desiredAlignment = options.alignment;
  var allowPlacementAxisChange = options.allowPlacementAxisChange === undefined ? true : options.allowPlacementAxisChange;
  var placement = desiredPlacement;
  var alignment = desiredAlignment;

  var spaceLeftOfAnchor = context.anchorRect.left - context.offsetFromEdge;
  var spaceRightOfAnchor = context.availableWidth - context.anchorRect.right - context.offsetFromEdge;
  var spaceAboveAnchor = context.anchorRect.top - context.offsetFromEdge;
  var spaceBelowAnchor = context.availableHeight - context.anchorRect.bottom - context.offsetFromEdge;
  var sufficientSpaceIfPlacedOnLeft = context.bodyElementWidthWithoutPadding + context.bodyOffsetFromAnchor <= spaceLeftOfAnchor;
  var sufficientSpaceIfPlacedOnRight = context.bodyElementWidthWithoutPadding + context.bodyOffsetFromAnchor <= spaceRightOfAnchor;
  var sufficientSpaceIfPlacedAbove = context.bodyElementHeightWithoutPadding + context.bodyOffsetFromAnchor <= spaceAboveAnchor;
  var sufficientSpaceIfPlacedBelow = context.bodyElementHeightWithoutPadding + context.bodyOffsetFromAnchor <= spaceBelowAnchor;

  if (desiredPlacement === _constants.PLACEMENT_TOP || desiredPlacement === _constants.PLACEMENT_BOTTOM) {
    if (desiredPlacement === _constants.PLACEMENT_BOTTOM && !sufficientSpaceIfPlacedBelow) {
      if (sufficientSpaceIfPlacedAbove) {
        return { placement: _constants.PLACEMENT_TOP, alignment: alignment };
      }
      if (allowPlacementAxisChange && sufficientSpaceIfPlacedOnLeft) {
        return { placement: _constants.PLACEMENT_LEFT, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (allowPlacementAxisChange && sufficientSpaceIfPlacedOnRight) {
        return { placement: _constants.PLACEMENT_RIGHT, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (spaceAboveAnchor > spaceBelowAnchor) {
        return { placement: _constants.PLACEMENT_TOP, alignment: alignment };
      }
    }

    if (desiredPlacement === _constants.PLACEMENT_TOP && !sufficientSpaceIfPlacedAbove) {
      if (sufficientSpaceIfPlacedBelow) {
        return { placement: _constants.PLACEMENT_BOTTOM, alignment: alignment };
      }
      if (allowPlacementAxisChange && sufficientSpaceIfPlacedOnLeft) {
        return { placement: _constants.PLACEMENT_LEFT, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (allowPlacementAxisChange && sufficientSpaceIfPlacedOnRight) {
        return { placement: _constants.PLACEMENT_RIGHT, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (spaceBelowAnchor > spaceAboveAnchor) {
        return { placement: _constants.PLACEMENT_BOTTOM, alignment: alignment };
      }
    }
  }

  if (desiredPlacement === _constants.PLACEMENT_LEFT || desiredPlacement === _constants.PLACEMENT_RIGHT) {
    if (desiredPlacement === _constants.PLACEMENT_LEFT && !sufficientSpaceIfPlacedOnLeft) {
      if (sufficientSpaceIfPlacedOnRight) {
        return { placement: _constants.PLACEMENT_RIGHT, alignment: alignment };
      }
      if (allowPlacementAxisChange && !sufficientSpaceIfPlacedBelow && sufficientSpaceIfPlacedAbove) {
        return { placement: _constants.PLACEMENT_TOP, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (allowPlacementAxisChange) {
        return { placement: _constants.PLACEMENT_BOTTOM, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (spaceRightOfAnchor > spaceLeftOfAnchor) {
        return { placement: _constants.PLACEMENT_RIGHT, alignment: alignment };
      }
    }

    if (desiredPlacement === _constants.PLACEMENT_RIGHT && !sufficientSpaceIfPlacedOnRight) {
      if (sufficientSpaceIfPlacedOnLeft) {
        return { placement: _constants.PLACEMENT_LEFT, alignment: alignment };
      }
      if (allowPlacementAxisChange && !sufficientSpaceIfPlacedBelow && sufficientSpaceIfPlacedAbove) {
        return { placement: _constants.PLACEMENT_TOP, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (allowPlacementAxisChange) {
        return { placement: _constants.PLACEMENT_BOTTOM, alignment: _constants.ALIGNMENT_CENTER };
      }
      if (spaceLeftOfAnchor > spaceRightOfAnchor) {
        return { placement: _constants.PLACEMENT_LEFT, alignment: alignment };
      }
    }
  }

  return { placement: placement, alignment: alignment };
}