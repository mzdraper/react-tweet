'use strict';

exports.__esModule = true;
exports.default = calculateBodyStyle;

var _prefix = require('prefix');

var _prefix2 = _interopRequireDefault(_prefix);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {string} placement
 * @param {string} alignment
 * @param {Object} options - See definition in calculatePosition
 * @param {PopoverPositionContext} context - See definition in calculatePositionContext
 * @return {Object}
 */
function calculateBodyStyle(placement, alignment, options, context) {
  var _style;

  var topOffset = void 0;
  var leftOffset = void 0;
  if (placement === _constants.PLACEMENT_TOP) {
    topOffset = context.anchorAbsoluteTop - context.bodyElementHeightWithoutPadding - context.bodyOffsetFromAnchor;
  } else if (placement === _constants.PLACEMENT_BOTTOM) {
    topOffset = context.anchorAbsoluteBottom + context.bodyOffsetFromAnchor;
  } else if (alignment === _constants.ALIGNMENT_TOP) {
    topOffset = context.anchorAbsoluteTop;
  } else if (alignment === _constants.ALIGNMENT_BOTTOM) {
    topOffset = context.anchorAbsoluteBottom - context.bodyElementHeightWithoutPadding;
  } else {
    // Only situation left is left/right placed with alignment center
    topOffset = context.anchorAbsoluteTop + context.anchorRect.height / 2 - context.bodyElementHeightWithoutPadding / 2;
  }
  topOffset = Math.max(context.offsetFromEdge, Math.round(topOffset));
  // topOffset = Math.min(maxTopOffset, topOffset);
  if (topOffset < context.topBoundary) topOffset = context.topBoundary;
  if (topOffset + context.bodyElementHeightWithoutPadding > context.bottomBoundary) topOffset = context.bottomBoundary - context.bodyElementHeightWithoutPadding;
  topOffset -= context.documentTopOffset;

  if (placement === _constants.PLACEMENT_LEFT) {
    leftOffset = context.anchorRect.left - context.bodyElementWidthWithoutPadding - context.bodyOffsetFromAnchor;
  } else if (placement === _constants.PLACEMENT_RIGHT) {
    leftOffset = context.anchorRect.right + context.bodyOffsetFromAnchor;
  } else if (alignment === _constants.ALIGNMENT_LEFT) {
    leftOffset = context.anchorRect.left;
  } else if (alignment === _constants.ALIGNMENT_RIGHT) {
    leftOffset = context.anchorRect.right - context.bodyElementWidthWithoutPadding;
  } else {
    // Only situation left is top/bottom placed with alignment center
    leftOffset = context.anchorRect.left + context.anchorRect.width / 2 - context.bodyElementWidthWithoutPadding / 2;
  }
  leftOffset = Math.max(context.offsetFromEdge, Math.round(leftOffset));
  leftOffset = Math.min(context.maxLeftOffset, leftOffset);

  var prefixedTransform = _prefix2.default.dash('transform');

  var style = (_style = {}, _style[prefixedTransform] = 'translate3d(' + leftOffset + 'px, ' + topOffset + 'px, 0)', _style['max-width'] = context.maxWidth + 'px', _style['max-height'] = context.maxHeight + 'px', _style);

  return style;
}