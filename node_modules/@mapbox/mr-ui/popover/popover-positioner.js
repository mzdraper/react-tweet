'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDisplace = require('react-displace');

var _reactDisplace2 = _interopRequireDefault(_reactDisplace);

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _calculatePosition = require('./calculate-position');

var _calculatePosition2 = _interopRequireDefault(_calculatePosition);

var _getScrollableParents = require('./get-scrollable-parents');

var _getScrollableParents2 = _interopRequireDefault(_getScrollableParents);

var _createScrollListener = require('./create-scroll-listener');

var _createScrollListener2 = _interopRequireDefault(_createScrollListener);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var popoverPositionerList = [];

/**
 * Secretly mounts a popover and its pointer, calculates their positions, then repositions and exposes them.
 *
 * @param {ReactNode} children
 * @param {Function} getAnchorElement - Function that returns the popover's anchor element.
 * @param {'top' | 'bottom' | 'left' | 'right' } [placement] - See options for calculatePosition.
 * @param { 'top' | 'bottom' | 'left' | 'right' | 'center' } [alignment] - See options for calculatePosition.
 * @param {boolean} [hasPointer] - See options for calculatePosition.
 * @param {number} [pointerBase] - See options for calculatePosition.
 * @param {number} [pointerAltitude] - See options for calculatePosition.
 * @param {string} [pointerColor] - See options for calculatePosition.
 * @param {number} [offsetFromAnchor] - See options for calculatePosition.
 * @param {boolean} [hideWhenAnchorIsOffscreen] - See options for calculatePosition.
 * @param {boolean} [allowPlacementAxisChange] - See options for calculatePosition.
 * @param {boolean} [containWithinViewport] - See options for calculatePosition.
 * @param {Function} [getContainingElement] - See options for calculatePosition.
 * @param {Function} [onElement] - A function that receives the containing element.
 */

var PopoverPositioner = function (_React$PureComponent) {
  (0, _inherits3.default)(PopoverPositioner, _React$PureComponent);

  function PopoverPositioner() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, PopoverPositioner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.getScrollableParentElement = function () {
      return _this.scrollableParents[0];
    }, _this.setPosition = function () {
      var _this2 = _this,
          props = _this2.props;


      var positionData = _this.props.calculatePosition({
        getScrollableParentElement: _this.getScrollableParentElement,
        getPopoverElement: _this.getPopoverElement,
        getAnchorElement: props.getAnchorElement,
        placement: props.placement,
        alignment: props.alignment,
        offsetFromAnchor: props.offsetFromAnchor,
        pointerBase: props.pointerBase,
        pointerAltitude: props.pointerAltitude,
        pointerColor: props.pointerColor,
        hideWhenAnchorIsOffscreen: props.hideWhenAnchorIsOffscreen,
        allowPlacementAxisChange: props.allowPlacementAxisChange,
        containWithinViewport: props.containWithinViewport,
        getContainingElement: props.getContainingElement
      });

      var bodyElement = _this.bodyElement;
      if (bodyElement) {
        bodyElement.style.setProperty('visibility', 'visible');
        for (var key in positionData.bodyPositioningStyle) {
          bodyElement.style.setProperty(key, positionData.bodyPositioningStyle[key]);
        }
      }

      var pointerElement = _this.pointerElement;
      if (pointerElement) {
        pointerElement.style.setProperty('visibility', 'visible');
        for (var _key2 in positionData.pointerPositioningStyle) {
          pointerElement.style.setProperty(_key2, positionData.pointerPositioningStyle[_key2]);
        }
      }
    }, _this.setBodyElement = function (element) {
      _this.bodyElement = element;
    }, _this.setContainerElement = function (element) {
      _this.containerElement = element;
      if (_this.props.onElement) _this.props.onElement(element);
    }, _this.getPopoverElement = function () {
      return _this.bodyElement;
    }, _this.setPointerElement = function (element) {
      _this.pointerElement = element;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  PopoverPositioner.prototype.componentDidMount = function componentDidMount() {
    var _this3 = this;

    popoverPositionerList.push(this.setPosition);
    this.scrollableParents = this.props.getScrollableParents(this.props.getAnchorElement());
    this.handleResize = (0, _debounce2.default)(this.setPosition, 200);
    this.props.getWindow().addEventListener('resize', this.handleResize);
    this.scrollListeners = this.scrollableParents.map(function (scrollableParent) {
      var scrollListener = _this3.props.createScrollListener(scrollableParent, _this3.setPosition);
      scrollListener.start();
      return scrollListener;
    }, this);
    this.setPosition();
  };

  PopoverPositioner.prototype.componentDidUpdate = function componentDidUpdate() {
    this.setPosition();
  };

  PopoverPositioner.prototype.componentWillUnmount = function componentWillUnmount() {
    this.props.getWindow().removeEventListener('resize', this.handleResize);
    this.scrollListeners.forEach(function (scrollListener) {
      scrollListener.stop();
    });
    popoverPositionerList.splice(popoverPositionerList.indexOf(this.setPosition), 1);
  };

  PopoverPositioner.prototype.render = function render() {
    var basicStyle = {
      position: 'absolute',
      zIndex: 1,
      top: 0,
      left: 0,
      visibility: 'hidden'
    };

    return _react2.default.createElement(
      'div',
      { ref: this.setContainerElement },
      _react2.default.createElement(
        'div',
        {
          'data-test': 'popover-body',
          ref: this.setBodyElement,
          style: basicStyle
        },
        this.props.children
      ),
      _react2.default.createElement('div', {
        'data-test': 'popover-pointer',
        ref: this.setPointerElement,
        style: basicStyle
      })
    );
  };

  return PopoverPositioner;
}(_react2.default.PureComponent);

PopoverPositioner.propTypes = {
  children: _propTypes2.default.node.isRequired,
  getAnchorElement: _propTypes2.default.func.isRequired,
  placement: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right']),
  alignment: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right', 'center']),
  pointerBase: _propTypes2.default.number,
  hasPointer: _propTypes2.default.bool,
  pointerAltitude: _propTypes2.default.number,
  pointerColor: _propTypes2.default.string,
  offsetFromAnchor: _propTypes2.default.number,
  hideWhenAnchorIsOffscreen: _propTypes2.default.bool,
  allowPlacementAxisChange: _propTypes2.default.bool,
  containWithinViewport: _propTypes2.default.bool,
  getContainingElement: _propTypes2.default.func,
  onElement: _propTypes2.default.func,
  // For mockery
  calculatePosition: _propTypes2.default.func,
  getScrollableParents: _propTypes2.default.func,
  createScrollListener: _propTypes2.default.func,
  getWindow: _propTypes2.default.func
};
PopoverPositioner.defaultProps = {
  calculatePosition: _calculatePosition2.default,
  getScrollableParents: _getScrollableParents2.default,
  createScrollListener: _createScrollListener2.default,
  getWindow: _getWindow2.default
};


var displaced = (0, _reactDisplace2.default)(PopoverPositioner);
displaced.recalculatePositions = function () {
  popoverPositionerList.forEach(function (recalcFn) {
    recalcFn();
  });
};

exports.default = displaced;