'use strict';

exports.__esModule = true;
exports.default = adjustStylesForAnchorVisibility;

var _xtend = require('xtend');

var _xtend2 = _interopRequireDefault(_xtend);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hideStyles = {
  visibility: 'hidden',
  zIndex: -1
};

var showStyles = {
  visibility: 'visible',
  zIndex: 1
};

/**
 * @param {Object} pointerStyle
 * @param {Object} bodyStyle
 * @param {string} placement
 * @param {Object} options - See definition in calculatePosition
 * @param {PopoverPositionContext} context - See definition in calculatePositionContext
 * @return {{ pointerStyle: Object, bodyStyle: Object }}
 */
function adjustStylesForAnchorVisibility(pointerStyle, bodyStyle, placement, options, context) {
  var hideThings = function hideThings() {
    var newPointerStyle = (0, _xtend2.default)(pointerStyle, hideStyles);
    var newBodyStyle = options.hideWhenAnchorIsOffscreen ? (0, _xtend2.default)(bodyStyle, hideStyles) : bodyStyle;
    return { pointerStyle: newPointerStyle, bodyStyle: newBodyStyle };
  };

  var showThings = function showThings() {
    var newPointerStyle = (0, _xtend2.default)(pointerStyle, showStyles);
    var newBodyStyle = options.hideWhenAnchorIsOffscreen ? (0, _xtend2.default)(bodyStyle, showStyles) : bodyStyle;
    return { pointerStyle: newPointerStyle, bodyStyle: newBodyStyle };
  };

  var win = (0, _getWindow2.default)();
  var scrollableParent = options.getScrollableParentElement !== undefined ? options.getScrollableParentElement() : null;

  if (!scrollableParent) {
    return { pointerStyle: pointerStyle, bodyStyle: bodyStyle };
  }

  var scrollY = win.pageYOffset;
  var scrollableParentTop = void 0;
  var scrollableParentBottom = void 0;
  if (scrollableParent === win) {
    scrollableParentTop = options.containWithinViewport ? scrollY : 0;
    scrollableParentBottom = options.containWithinViewport ? scrollY + win.innerHeight : context.availableHeight;
  } else {
    var scrollableParentRect = scrollableParent.getBoundingClientRect();
    scrollableParentTop = scrollableParentRect.top + scrollY;
    scrollableParentBottom = scrollableParentRect.bottom + scrollY;
  }

  var offsetFromScrollableParentTopEdge = Math.round(context.anchorVerticalCenter - options.pointerBase / 2) - 2;
  var offsetFromScrollableParentBottomEdge = Math.round(context.anchorVerticalCenter + options.pointerBase / 2) + 2;
  var onLeftOrRight = placement === _constants.PLACEMENT_LEFT || placement === _constants.PLACEMENT_RIGHT;

  if (placement === _constants.PLACEMENT_TOP && scrollableParentTop > context.anchorAbsoluteTop || placement === _constants.PLACEMENT_BOTTOM && scrollableParentBottom < context.anchorAbsoluteTop || !onLeftOrRight && scrollableParentBottom < context.anchorAbsoluteTop || !onLeftOrRight && scrollableParentTop > context.anchorAbsoluteBottom || onLeftOrRight && (
  // Offset the allowed top/bottom to prevent the pointer triangle from appearing
  // beyond the border curves
  scrollableParentTop + options.pointerBase / 2 + 1 > offsetFromScrollableParentTopEdge || scrollableParentBottom - options.pointerBase / 2 - 1 < offsetFromScrollableParentBottomEdge)) {
    return hideThings();
  } else {
    return showThings();
  }
}