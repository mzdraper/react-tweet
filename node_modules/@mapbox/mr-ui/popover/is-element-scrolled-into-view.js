'use strict';

exports.__esModule = true;
exports.default = isElementScrolledIntoView;

var _getScrollableParents = require('./get-scrollable-parents');

var _getScrollableParents2 = _interopRequireDefault(_getScrollableParents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a boolean indicating whether an element is scrolled into
 * view. If it has no scrollable parent, this just means it's within
 * the viewport. If it does have a scrollable parent, this means that
 * both window and parent are scrolled such that the element is visible.
 *
 * Assumes there's only one level of sub-document scrolling involved,
 * i.e. one scrollable parent.
 *
 * @param {HTMLElement} element
 * @return {Boolean}
 */
function isElementScrolledIntoView(element) {
  var scrollableParents = (0, _getScrollableParents2.default)(element).filter(function (parent) {
    return parent !== window;
  });

  var elementRect = element.getBoundingClientRect();
  if (scrollableParents.length > 0) {
    var scrollableParentRect = scrollableParents[0].getBoundingClientRect();
    if (scrollableParentRect.top > elementRect.top || scrollableParentRect.bottom < elementRect.bottom) {
      return false;
    }
  }

  var bodyTop = document.body.scrollTop;
  if (bodyTop > elementRect.top + bodyTop) return false;
  return bodyTop + window.innerHeight > elementRect.bottom + bodyTop;
}