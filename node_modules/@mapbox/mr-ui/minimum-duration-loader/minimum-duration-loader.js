'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This component displays a loading indicator in place of its children until
// the isLoaded prop is true. The indicator will be displayed for a minimum
// amount of time as specified by the minDuration prop (defaults to one second).

var MinimumDurationLoader = function (_React$PureComponent) {
  (0, _inherits3.default)(MinimumDurationLoader, _React$PureComponent);

  function MinimumDurationLoader(props) {
    (0, _classCallCheck3.default)(this, MinimumDurationLoader);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.call(this, props));

    _this._delayedMountTimeout = null;
    _this._startedLoadingTimestamp = 0;


    _this.state = { shouldRenderContent: props.isLoaded };
    return _this;
  }

  MinimumDurationLoader.prototype.componentDidMount = function componentDidMount() {
    this._startedLoadingTimestamp = Date.now();
    if (this.props.onContentRender && this.state.shouldRenderContent) {
      this.props.onContentRender();
    }
  };

  MinimumDurationLoader.prototype.componentDidUpdate = function componentDidUpdate() {
    if (this.props.onContentRender && this.state.shouldRenderContent) {
      this.props.onContentRender();
    }
  };

  MinimumDurationLoader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var currentTime = Date.now();

    if (!nextProps.isLoaded && this._delayedMountTimeout !== null) {
      // Clear the existing timeout if the content begins loading again.
      clearTimeout(this._delayedMountTimeout);
      this._delayedMountTimeout = null;
    }

    if (nextProps.isLoaded && !this.state.shouldRenderContent) {
      var timeSinceLoading = currentTime - this._startedLoadingTimestamp;
      var nextState = { shouldRenderContent: true };

      if (timeSinceLoading < nextProps.minDuration) {
        // Display the content after the minimum duration has been reached.
        this._delayedMountTimeout = setTimeout(function () {
          _this2._delayedMountTimeout = null;
          _this2.setState(nextState);
        }, nextProps.minDuration - timeSinceLoading);
      } else {
        // The minimum duration has been reached, so show the content immediately.
        this.setState(nextState);
      }
    } else if (!nextProps.isLoaded && this.state.shouldRenderContent) {
      // Reset the component's original state if the content begins loading again.
      this._startedLoadingTimestamp = currentTime;
      this.setState({ shouldRenderContent: false });
    }
  };

  MinimumDurationLoader.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this._delayedMountTimeout) {
      clearTimeout(this._delayedMountTimeout);
    }
  };

  MinimumDurationLoader.prototype.render = function render() {
    if (this.state.shouldRenderContent) {
      return this.props.children;
    }

    return this.props.loader;
  };

  return MinimumDurationLoader;
}(_react2.default.PureComponent);

MinimumDurationLoader.propTypes = {
  children: _propTypes2.default.node,
  isLoaded: _propTypes2.default.bool,
  loader: _propTypes2.default.node,
  minDuration: _propTypes2.default.number,
  onContentRender: _propTypes2.default.func
};
MinimumDurationLoader.defaultProps = {
  loader: _react2.default.createElement('div', { className: 'loading', 'data-test-loader': true }),
  minDuration: 1000
};
exports.default = MinimumDurationLoader;