'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactAriaModal = require('react-aria-modal');

var _reactAriaModal2 = _interopRequireDefault(_reactAriaModal);

var _tooltip = require('../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _getWindow = require('../utils/get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _modalActions = require('./modal-actions');

var _modalActions2 = _interopRequireDefault(_modalActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An accessible modal dialog.
 *
 * To get a standard button arrangement at the bottom of the modal, use the
 * `primaryAction`, `secondaryAction`, and `tertiaryAction` props.
 *
 * This modal *traps focus within it*. You should be aware of that, because it
 * can sometimes introduce a hurdle when integrating the modal with other
 * things, especially third-party libraries. But it's an essential UX feature.
 */
var Modal = function (_React$Component) {
  (0, _inherits3.default)(Modal, _React$Component);

  function Modal(props) {
    (0, _classCallCheck3.default)(this, Modal);

    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));

    _this.setDialogEl = _this.setDialogEl.bind(_this);
    return _this;
  }

  Modal.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // After the modal has mounted, it will receive focus (unless initialFocus)
    // is set. If it is taller than the viewport, the browser will scroll down
    // so the top of the modal is at the top of the viewport, instead of
    // staying at the top where you can see the nice padding. To show the
    // padding, we get the underlay element and scroll to the top of that
    // right after the component mounts.
    if (!this.dialogEl || typeof window === 'undefined') return;
    // A slight delay is necessary so this happens after focus is placed.
    this.scrollTimeout = (0, _getWindow2.default)().setTimeout(function () {
      var offsetParent = _this2.dialogEl.offsetParent;
      if (offsetParent.tagName === 'BODY' || offsetParent.tagName === 'HTML') {
        return;
      }
      offsetParent.scrollTop = 0;
    }, 0);
  };

  Modal.prototype.componentWillUnmount = function componentWillUnmount() {
    if (typeof window === 'undefined') return;
    (0, _getWindow2.default)().clearTimeout(this.scrollTimeout);
  };

  Modal.prototype.setDialogEl = function setDialogEl(el) {
    this.dialogEl = el;
  };

  Modal.prototype.renderActions = function renderActions() {
    var _props = this.props,
        primaryAction = _props.primaryAction,
        secondaryAction = _props.secondaryAction,
        tertiaryAction = _props.tertiaryAction;

    if (!primaryAction) {
      return null;
    }

    return _react2.default.createElement(
      'div',
      { className: 'mt24' },
      _react2.default.createElement(_modalActions2.default, {
        primaryAction: primaryAction,
        secondaryAction: secondaryAction,
        tertiaryAction: tertiaryAction
      })
    );
  };

  Modal.prototype.render = function render() {
    var props = this.props;


    var closeButton = null;
    if (props.onExit) {
      closeButton = _react2.default.createElement(
        'div',
        { className: 'absolute top right' },
        _react2.default.createElement(
          _tooltip2.default,
          { block: true, content: 'Close' },
          _react2.default.createElement(
            'button',
            {
              type: 'button',
              className: 'btn btn--transparent unround-t unround-br color-gray py12 px12',
              onClick: props.onExit,
              'data-test': 'modal-close'
            },
            _react2.default.createElement(_icon2.default, { name: 'close' })
          )
        )
      );
    }

    var widthClass = '';
    if (props.size === 'small') {
      widthClass = 'w360';
    } else if (props.size === 'large') {
      widthClass = 'w600';
    }

    var containerClasses = (0, _classnames2.default)('relative wmax-full ' + widthClass + ' bg-white round', { 'px36 py36': props.padding === 'large' });

    var dialogBody = _react2.default.createElement(
      'div',
      { ref: this.setDialogEl, className: containerClasses },
      props.children,
      this.renderActions(),
      closeButton
    );

    var modalProps = {
      titleText: props.accessibleTitle,
      getApplicationNode: props.getApplicationNode,
      underlayProps: { 'data-popover-ignore-clicks': true },
      underlayClass: 'bg-darken50 px12 py12 px60-mm py60-mm ',
      underlayStyle: {
        zIndex: 1
      },
      alert: props.alert
    };

    if (props.onExit) {
      modalProps.onExit = props.onExit;
    }

    if (props.initialFocus) {
      modalProps.initialFocus = props.initialFocus;
    } else {
      modalProps.focusDialog = true;
    }

    return _react2.default.createElement(
      _reactAriaModal2.default,
      modalProps,
      dialogBody
    );
  };

  return Modal;
}(_react2.default.Component);

exports.default = Modal;


Modal.propTypes = {
  /**
   * A screen-reader-friendly modal title. Required for accessibility.
   *
   * This **will not be displayed.** It's only for screen readers.
   * You can visually display your own header text however you'd like.
   */
  accessibleTitle: _propTypes2.default.string.isRequired,
  /**
   * Invoked when the modal should close. When this callback is provided,
   * a close button will be in the top right corner, and a click on the underlay
   * or the Escape key will close the modal.
   *
   * If this prop is not provided, the close button will not be present and
   * a click on the underlay or Escape will not close the modal. The reason
   * you might not provide this function is that you want to force the user
   * to do something, instead of allowing them to sneak out of the modal.
   */
  onExit: _propTypes2.default.func,
  /**
   * A function that should the primary application node, which should be
   * `aria-hidden` when the modal is open. By default, returns
   * `document.getElementById('app')`.
   */
  getApplicationNode: _propTypes2.default.func,
  /**
   * Modal container size. Options are `small`, `large`, or `auto`. If `auto`
   * is provided, a width is not specified.
   */
  size: _propTypes2.default.oneOf(['small', 'large', 'auto']),
  /**
   * Selector for a specific element that should receive initial focus. The
   * value will be passed to `querySelector`.
   */
  initialFocus: _propTypes2.default.string,
  /**
   * The content of the modal.
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * `'large'` or `'none'`.
   */
  padding: _propTypes2.default.oneOf(['large', 'none']),
  /**
   * If `true`, the modal will have the accessibility props of an alert modal.
   * (Only affects screen readers.)
   */
  alert: _propTypes2.default.bool,
  /**
   * The modal's primary action. If this is provided, an encouraging
   * button will be rendered at the bottom of the modal.
   *
   * Provide this and other action props if you want a standard button
   * arrangement at the bottom of the modal. If you need a more custom
   * arrangement, leave them out and insert your buttons into the content.
   *
   * The value is an object with the following properties:
   * - `text`: **(required)** The text of the button.
   * - `callback`: **(required)** Invoked when the button is clicked.
   * - `destructive`: If `true`, the [Button](#button) will be primed for
   *   desctruction.
   */
  primaryAction: _propTypes2.default.shape({
    text: _propTypes2.default.string.isRequired,
    callback: _propTypes2.default.func.isRequired,
    destructive: _propTypes2.default.bool
  }),
  /**
   * The modal's secondary action. If this is provided, a discouraging button
   * will be rendered at the bottom of the modal. See the description of
   * `primaryAction`.
   *
   * **Can only be used in combination with `primaryAction`.**
   *
   * The value is an object with the following properties:
   * - `text`: **(required)** The text of the button.
   * - `callback`: **(required)** Invoked when the button is clicked.
   */
  secondaryAction: _propTypes2.default.shape({
    text: _propTypes2.default.string.isRequired,
    callback: _propTypes2.default.func.isRequired
  }),
  /**
   * The modal's tertiary action. **You should rarely if ever need this.**
   * If this is provided, a *very* discouraging button
   * will be rendered at the bottom of the modal. See the description of
   * `primaryAction`.
   *
   * **Can only be used in combination with `primaryAction` and
   * `secondaryAction`.**
   *
   * The value is an object with the following properties:
   * - `text`: **(required)** The text of the button.
   * - `callback`: **(required)** Invoked when the button is clicked.
   */
  tertiaryAction: _propTypes2.default.shape({
    text: _propTypes2.default.string.isRequired,
    callback: _propTypes2.default.func.isRequired
  })
};

Modal.defaultProps = {
  size: 'large',
  getApplicationNode: function getApplicationNode() {
    return document.getElementById('app');
  },
  padding: 'large'
};