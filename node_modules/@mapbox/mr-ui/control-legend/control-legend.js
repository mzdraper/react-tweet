'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ControlLegend = function (_React$PureComponent) {
  (0, _inherits3.default)(ControlLegend, _React$PureComponent);

  function ControlLegend() {
    (0, _classCallCheck3.default)(this, ControlLegend);
    return (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.apply(this, arguments));
  }

  ControlLegend.prototype.render = function render() {
    var _props = this.props,
        text = _props.text,
        id = _props.id,
        aside = _props.aside,
        optional = _props.optional,
        themeLegend = _props.themeLegend;

    var legendClasses = 'inline-block ' + themeLegend;

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'legend',
        { htmlFor: id, className: legendClasses },
        text,
        ' ',
        optional && _react2.default.createElement(
          'span',
          { className: 'txt-normal' },
          '(optional)'
        )
      ),
      aside && _react2.default.createElement(
        'span',
        { className: 'inline-block ml12' },
        aside
      )
    );
  };

  return ControlLegend;
}(_react2.default.PureComponent);

ControlLegend.propTypes = {
  /** Label text for this control. */
  text: _propTypes2.default.string.isRequired,
  /** Element id used to group additional form controls. */
  id: _propTypes2.default.string.isRequired,
  /** Additional content inserted alongside the label element. */
  aside: _propTypes2.default.node,
  /** If `true`, the text `(optional)` is appended to the label element. */
  optional: _propTypes2.default.bool,
  /** Classes to apply to the legend element. */
  themeLegend: _propTypes2.default.string
};
ControlLegend.defaultProps = {
  themeLegend: 'txt-s txt-bold mb6'
};
exports.default = ControlLegend;