'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('../utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _controlLegend = require('../control-legend');

var _controlLegend2 = _interopRequireDefault(_controlLegend);

var _controlWrapper = require('../control-wrapper');

var _controlWrapper2 = _interopRequireDefault(_controlWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ControlCheckboxSet = function (_React$Component) {
  (0, _inherits3.default)(ControlCheckboxSet, _React$Component);

  function ControlCheckboxSet() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ControlCheckboxSet);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onChange = function (e) {
      var current = e.target.value;
      var value = _this.props.value;

      var index = value.indexOf(current);
      var newValue = value;

      if (index === -1) {
        newValue.push(current);
      } else {
        newValue.splice(index, 1);
      }

      return _this.props.onChange(newValue, _this.props.id);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  ControlCheckboxSet.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        id = _props.id,
        value = _props.value,
        legend = _props.legend,
        options = _props.options,
        optional = _props.optional,
        aside = _props.aside,
        autoFocus = _props.autoFocus,
        icon = _props.icon,
        validationError = _props.validationError,
        themeCheckboxContainer = _props.themeCheckboxContainer,
        themeCheckbox = _props.themeCheckbox,
        themeControlWrapper = _props.themeControlWrapper,
        themeLegend = _props.themeLegend;


    var groupProps = {
      id: id,
      'data-test': id + '-input'
    };

    if (validationError) {
      groupProps['aria-invalid'] = true;
    }

    var renderOptions = function renderOptions(d) {
      var isActive = value.indexOf(d.value) >= 0 ? true : false;
      var extraProps = (0, _omit2.default)(d, ['value', 'label']);
      return _react2.default.createElement(
        'label',
        {
          key: d.value,
          className: 'checkbox-container ' + themeCheckboxContainer
        },
        _react2.default.createElement('input', (0, _extends3.default)({
          value: d.value,
          checked: isActive,
          'aria-checked': isActive,
          autoFocus: autoFocus && isActive,
          onChange: _this2.onChange,
          name: id,
          role: 'checkbox',
          type: 'checkbox'
        }, extraProps)),
        _react2.default.createElement(
          'div',
          { className: themeCheckbox + ' checkbox' },
          _react2.default.createElement(_icon2.default, { name: icon })
        ),
        d.label
      );
    };

    return _react2.default.createElement(
      _controlWrapper2.default,
      {
        themeControlWrapper: themeControlWrapper,
        id: id,
        validationError: validationError
      },
      _react2.default.createElement(
        'fieldset',
        null,
        legend && _react2.default.createElement(_controlLegend2.default, {
          text: legend,
          id: id,
          aside: aside,
          optional: optional,
          themeLegend: themeLegend
        }),
        _react2.default.createElement(
          'div',
          groupProps,
          options.map(renderOptions)
        )
      )
    );
  };

  return ControlCheckboxSet;
}(_react2.default.Component);

ControlCheckboxSet.propTypes = {
  /** Unique id for this control. */
  id: _propTypes2.default.string.isRequired,
  /**
   * An array of object(s) that represent each option of the set.
   * Each object should contain two fields:
   *
   * - `label` which can either be a string or valid JSX
   * - `value` a unique string value
   *
   * Any additional fields added will be passed as attributes to the input
   * element.
   */
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.node.isRequired,
    value: _propTypes2.default.string.isRequired
  })).isRequired,
  /**
   * Invoked when the control's value changes.
   * Passed two arguments:
   *
   * - The value. A string matching the `value` field of one of the `options`
   *   props passed.
   * - The `id` prop.
   */
  onChange: _propTypes2.default.func.isRequired,
  /** Legend label for the control. */
  legend: _propTypes2.default.string,
  /** Accepts an array of strings, where each string matches the value property of an entry in the options prop. */
  value: _propTypes2.default.array,
  /** If provided, "(optional)" is appended to the value of the legend element. */
  optional: _propTypes2.default.bool,
  /** Additional content inserted alongside the legend element. */
  aside: _propTypes2.default.node,
  /** Icon to use for the checkbox active style. Must match an icon name available in Assembly. */
  icon: _propTypes2.default.string,
  /** When `true`, autofocus attributes are applied to the input that matches the `value` prop passed. */
  autoFocus: _propTypes2.default.bool,
  /** A validation error to display beneath the control. */
  validationError: _propTypes2.default.node,
  /** Classes to apply to the checkbox container. */
  themeCheckboxContainer: _propTypes2.default.string,
  /** Classes to apply to the checkbox element. */
  themeCheckbox: _propTypes2.default.string,
  /** Classes to apply to the control container. */
  themeControlWrapper: _propTypes2.default.string,
  /** Classes to apply to the legend element. */
  themeLegend: _propTypes2.default.string
};
ControlCheckboxSet.defaultProps = {
  value: [],
  optional: false,
  autoFocus: false,
  icon: 'check',
  themeCheckboxContainer: 'txt-s block mb6 flex-parent',
  themeCheckbox: 'mr6 inline-block checkbox--blue checkbox--s-label flex-child'
};
exports.default = ControlCheckboxSet;