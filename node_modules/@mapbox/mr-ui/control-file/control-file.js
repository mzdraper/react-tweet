'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('../utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _tooltip = require('../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _controlLabel = require('../control-label');

var _controlLabel2 = _interopRequireDefault(_controlLabel);

var _controlWrapper = require('../control-wrapper');

var _controlWrapper2 = _interopRequireDefault(_controlWrapper);

var _iconText = require('../icon-text');

var _iconText2 = _interopRequireDefault(_iconText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propNames = ['value', 'id', 'onChange', 'label', 'optional', 'aside', 'disabled', 'validationError', 'initialDisplayValue', 'themeControlFile', 'themeControlFileClear', 'themeControlWrapper', 'themeLabel',
// Passed when used with the Form component
'validator'];

var ControlFile = function (_React$Component) {
  (0, _inherits3.default)(ControlFile, _React$Component);

  function ControlFile() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ControlFile);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onChange = function (e) {
      var fileList = e.target.files;
      if (!fileList.length) return;
      var filesArray = [];
      for (var i = 0, l = fileList.length; i < l; i++) {
        filesArray.push(fileList[i]);
      }
      return _this.props.onChange(filesArray, _this.props.id);
    }, _this.state = {
      displayValue: ''
    }, _this.onButtonClick = function () {
      if (!_this.props.disabled) {
        _this.refs.file.click();
      }
    }, _this.onClear = function () {
      _this.refs.file.value = '';
      return _this.props.onChange('', _this.props.id);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  ControlFile.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var nextDisplayValue = !nextProps.value ? '' : nextProps.value.map(function (f) {
      return f.name;
    }).join(', ');
    if (nextDisplayValue !== this.state.displayValue) {
      this.setState({ displayValue: nextDisplayValue });
    }
  };

  ControlFile.prototype.render = function render() {
    var extraProps = (0, _omit2.default)(this.props, propNames);

    var _props = this.props,
        id = _props.id,
        label = _props.label,
        optional = _props.optional,
        aside = _props.aside,
        disabled = _props.disabled,
        validationError = _props.validationError,
        initialDisplayValue = _props.initialDisplayValue,
        themeControlFile = _props.themeControlFile,
        themeControlFileClear = _props.themeControlFileClear,
        themeControlWrapper = _props.themeControlWrapper,
        themeLabel = _props.themeLabel;


    var inputProps = {
      id: id,
      name: id,
      onChange: this.onChange,
      type: 'file',
      ref: 'file',
      disabled: disabled,
      className: 'absolute opacity0 top left',
      style: { height: '0', width: '0', zIndex: -1 },
      'aria-required': optional ? false : true,
      'data-test': id + '-input',
      tabIndex: -1
    };

    if (validationError) {
      inputProps['aria-invalid'] = true;
    }

    return _react2.default.createElement(
      _controlWrapper2.default,
      {
        themeControlWrapper: themeControlWrapper,
        id: id,
        validationError: validationError
      },
      label && _react2.default.createElement(_controlLabel2.default, {
        text: label,
        id: id,
        aside: aside,
        optional: optional,
        themeLabel: themeLabel
      }),
      _react2.default.createElement(
        'div',
        { className: 'flex-parent flex-parent--center-cross clip' },
        _react2.default.createElement(
          'div',
          { className: 'flex-child flex-child--grow' },
          _react2.default.createElement(
            'button',
            {
              type: 'button',
              'aria-hidden': true,
              disabled: disabled,
              className: themeControlFile + ' relative',
              onClick: this.onButtonClick
            },
            _react2.default.createElement(
              'span',
              { className: 'txt-truncate' },
              _react2.default.createElement(
                _iconText2.default,
                { iconBefore: 'harddrive' },
                this.state.displayValue || initialDisplayValue
              )
            )
          ),
          _react2.default.createElement('input', (0, _extends3.default)({}, inputProps, extraProps))
        ),
        this.state.displayValue && _react2.default.createElement(
          'div',
          { className: 'flex-child' },
          _react2.default.createElement(
            _tooltip2.default,
            { content: 'Clear', block: true },
            _react2.default.createElement(
              'button',
              {
                type: 'button',
                className: 'block link link--gray relative bg-transparent py0 ' + themeControlFileClear,
                onClick: this.onClear,
                'data-test': 'control-file-clear'
              },
              _react2.default.createElement(_icon2.default, { name: 'trash' })
            )
          )
        )
      )
    );
  };

  return ControlFile;
}(_react2.default.Component);

ControlFile.propTypes = {
  /** Identifying value for input element. */
  id: _propTypes2.default.string.isRequired,
  /** Input value */
  value: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({
    name: _propTypes2.default.string.isRequired
  })), _propTypes2.default.oneOf([''])]),
  /** Called during changes to the input element. Invoked with the array of
   selected files and the id of the input. */
  onChange: _propTypes2.default.func.isRequired,
  /** Value passed to the label element. */
  label: _propTypes2.default.string,
  /** If provided the text, "(optional)" is appended to the value of the label element. */
  optional: _propTypes2.default.bool,
  /** Additional content inserted alongside the label element. */
  aside: _propTypes2.default.node,
  /** Pass disabled attribute */
  disabled: _propTypes2.default.bool,
  /** If provided, the value of this propery displays as an error message. */
  validationError: _propTypes2.default.node,
  /** Overrides the "Select a file" label. */
  initialDisplayValue: _propTypes2.default.string,
  /** Assembly classes to apply to the button trigger element */
  themeControlFile: _propTypes2.default.string,
  /** Assembly classes to apply to the file clear element */
  themeControlFileClear: _propTypes2.default.string,
  /** Assembly classes to apply to the control wrapper */
  themeControlWrapper: _propTypes2.default.string,
  /** Assembly classes to apply to the input element */
  themeLabel: _propTypes2.default.string
};
ControlFile.defaultProps = {
  initialDisplayValue: 'Select a file',
  optional: false,
  disabled: false,
  themeControlFile: 'btn align-l bg-gray-faint py6 px12 round-full w-full txt-s link--gray txt-normal',
  themeControlFileClear: ''
};
exports.default = ControlFile;