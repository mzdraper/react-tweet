'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _underlineTabItem = require('./underline-tab-item');

var _underlineTabItem2 = _interopRequireDefault(_underlineTabItem);

var _underlineTabsConstants = require('./underline-tabs-constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * For navigation between pages or sections.
 *
 * Items will be `<button>`s or `<a>`s, depending on whether they
 * have `href` props or not.
 */
var UnderlineTabs = function (_React$Component) {
  (0, _inherits3.default)(UnderlineTabs, _React$Component);

  function UnderlineTabs() {
    (0, _classCallCheck3.default)(this, UnderlineTabs);
    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
  }

  UnderlineTabs.prototype.render = function render() {
    var props = this.props;


    var small = props.size === _underlineTabsConstants.SIZE_SMALL;
    var medium = props.size === _underlineTabsConstants.SIZE_MEDIUM;

    var containerClasses = (0, _classnames2.default)('flex-parent txt-nowrap unselectable', {
      'txt-bold': props.bold,
      'txt-s': medium,
      'txt-xs': small
    });

    var itemEls = props.items.map(function (item, index) {
      var first = index === 0;
      var layoutClasses = (0, _classnames2.default)('flex-child', {
        ml12: !first && small,
        'ml24 ml36-mxl': !first && !small
      });
      return _react2.default.createElement(
        'li',
        { key: item.id, className: layoutClasses },
        _react2.default.createElement(_underlineTabItem2.default, (0, _extends3.default)({
          active: props.active === item.id,
          onClick: props.onChange,
          size: props.size,
          inactiveColor: props.inactiveColor,
          activeColor: props.activeColor,
          hoverColor: props.hoverColor,
          overlapBorder: props.overlapBorder
        }, item))
      );
    });

    return _react2.default.createElement(
      'ul',
      { className: containerClasses },
      itemEls
    );
  };

  return UnderlineTabs;
}(_react2.default.Component);

UnderlineTabs.propTypes = {
  /**
   * Each item is an object with the following properties:
   * - `id` (required): A string ID.
   * - `label`: Text or React element. If `label` is not provided, `id` will
   *   be used, with its first letter capitalized. (You should provide your
   *   own `label` unless your `id`s are single words.)
   * - `href`: A URL. If `href` is provided, the items will be `<a>`s.
   *   If not, the items will be `<button>`s.
   * - `disabled`: Boolean.
   */
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    id: _propTypes2.default.string.isRequired,
    label: _propTypes2.default.node,
    href: _propTypes2.default.string,
    disabled: _propTypes2.default.bool
  })).isRequired,
  /**
   * The ID of the active item. Value must correspond with an `id` property
   * in the `items` array.
   */
  active: _propTypes2.default.string.isRequired,
  /**
   * A callback that will be invoked when an item is clicked.
   * It will receive the ID of the clicked item and the click `event` itself as arguments.
   */
  onChange: _propTypes2.default.func,
  /**
   * Three sizes: "small", "medium", or "large".
   */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  /**
   * If `true`, the element will extend down one pixel so the underline beneath
   * the active item overlaps the bottom border of a container.
   * **You must provide your own bottom border,** by setting it on a container
   * element.
   */
  overlapBorder: _propTypes2.default.bool,
  /** The Assembly color of inactive items. */
  inactiveColor: _propTypes2.default.string,
  /** The Assembly color of active items. */
  activeColor: _propTypes2.default.string,
  /** The Assembly color of hovered inactive items. */
  hoverColor: _propTypes2.default.string,
  /** Whether or not the text is bold. */
  bold: _propTypes2.default.bool
};

UnderlineTabs.defaultProps = {
  size: 'medium',
  inactiveColor: 'gray',
  activeColor: 'gray-dark',
  hoverColor: 'blue',
  overlapBorder: false,
  bold: true
};

exports.default = UnderlineTabs;