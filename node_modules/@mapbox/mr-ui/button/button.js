'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _xtend = require('xtend');

var _xtend2 = _interopRequireDefault(_xtend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A good-looking button!
 *
 * The rendered element will be a `<button>` or an `<a>`, depending on whether
 * you provide an `href` prop or not. (You can also use the `component` prop to
 * render a different element altogether.)
 *
 * If you'd like to put an icon before or after the text of your button,
 * use [IconText](#icontext) for the content.
 */
var Button = function (_React$Component) {
  (0, _inherits3.default)(Button, _React$Component);

  function Button() {
    (0, _classCallCheck3.default)(this, Button);
    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
  }

  Button.prototype.render = function render() {
    var _classnames;

    var props = applyVariant(this.props);

    var sizeSmall = props.size === 'small';
    var sizeMedium = props.size === 'medium';
    var sizeLarge = props.size === 'large';
    var widthFull = props.width === 'full';
    var widthSmall = props.width === 'small';
    var widthMedium = props.width === 'medium';
    var widthLarge = props.width === 'large';

    var classes = (0, _classnames3.default)('btn', (_classnames = {}, _classnames['btn--' + props.color] = props.color, _classnames['btn--stroke'] = props.outline, _classnames['btn--stroke--2'] = props.outline && !sizeSmall, _classnames.round = props.corners, _classnames['round-full'] = !props.corners, _classnames.h24 = sizeSmall, _classnames.py12 = sizeLarge, _classnames.py6 = sizeMedium, _classnames.px6 = widthSmall && sizeSmall, _classnames.px12 = widthMedium && sizeSmall || widthSmall && !sizeSmall, _classnames.px24 = widthLarge && sizeSmall || widthMedium && !sizeSmall, _classnames.px36 = !sizeSmall && widthLarge, _classnames['w-full block'] = widthFull, _classnames.block = props.block, _classnames['txt-s'] = !sizeSmall, _classnames['py3 txt-xs'] = sizeSmall, _classnames));

    var universalProps = (0, _xtend2.default)({
      className: classes,
      onClick: props.onClick,
      children: props.children
    }, props.passthroughProps);

    // "disabled" is not a valid attributes for anchors.
    var buttonProps = (0, _xtend2.default)(universalProps, { disabled: props.disabled });

    if (props.component) {
      return _react2.default.createElement(props.component, buttonProps);
    }

    if (props.href) {
      return _react2.default.createElement('a', (0, _extends3.default)({ href: props.href }, universalProps));
    }

    return _react2.default.createElement('button', (0, _extends3.default)({ type: 'button' }, buttonProps));
  };

  return Button;
}(_react2.default.Component);

var defaults = {
  color: 'blue',
  corners: false,
  outline: false,
  size: 'large',
  width: 'medium'
};
function applyVariant(props) {
  switch (props.variant) {
    case 'primary':
      return (0, _xtend2.default)(defaults, props);
    case 'secondary':
      return (0, _xtend2.default)(defaults, {
        outline: true
      }, props);
    case 'discouraging':
      return (0, _xtend2.default)(defaults, {
        color: 'gray',
        outline: true
      }, props);
    case 'destructive':
      return (0, _xtend2.default)(defaults, {
        color: 'red'
      }, props);
    case 'appPrimary':
      return (0, _xtend2.default)(defaults, {
        color: 'gray',
        size: 'small',
        width: 'small',
        corners: true
      }, props);
    case 'appSecondary':
      return (0, _xtend2.default)(defaults, {
        color: 'gray',
        size: 'small',
        width: 'small',
        corners: true,
        outline: true
      }, props);
  }
}

Button.propTypes = {
  /**
   * The button's content. A string is recommended, but you can put an element
   * in here if you think that's right. If you do, it should be inline-level,
   * using `<span>`s instead of `<div>`s. ([IconText](#icontext) is
   * inline-level.)
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * A keyword identifying the standard button styling variant to use.
   *
   * *The variant is a starting point*: all of the other styling props can be
   * used to override details.
   *
   * The following variants are available:
   *
   * - `"primary"`: For primary actions.
   * - `"secondary"`: For secondary actions.
   * - `"discouraging"`: For downplayed actions, the ones people shouldn't
   *   usually want to perform, like cancelling instead of confirming.
   * - `"destructive"`: For destructive actions, like deleting something.
   * - `"appPrimary"`: For primary actions in dense apps.
   * - `"appSecondary"`: For secondary actions in dense apps.
   */
  variant: _propTypes2.default.oneOf(['primary', 'secondary', 'discouraging', 'destructive', 'appPrimary', 'appSecondary']),
  /**
   * A callback that receives the click event.
   *
   * You definitely need this if you don't use `href`; but you can also provide
   * both `onClick` and `href`, and `onClick` will be called when the `<a>` is
   * clicked.
   */
  onClick: _propTypes2.default.func,
  /**
   * A URL. If `href` is provided, the button will be an `<a>`.
   */
  href: _propTypes2.default.string,
  /**
   * The size of the button: `"small"`, `"medium"`, or `"large"`.
   *
   * This accounts for height, outline thickness, text size, and other details.
   *
   * This will override whichever defaults are set by your `variant` of choice.
   */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  /**
   * The width of the button: `"small"`, `"medium"`, `"large"`, or `"full"`.
   * For every option but `"full"` this prop determines horizontal padding.
   * `"full"` sets the button to fill the width of its container.
   *
   * This is distinguished from `size` because buttons of the same general size
   * can vary by width.
   *
   * This will override whichever defaults are set by your `variant` of choice.
   */
  width: _propTypes2.default.oneOf(['small', 'medium', 'large', 'full']),
  /**
   * If `true`, the button will be outlined instead of filled with color.
   */
  outline: _propTypes2.default.bool,
  /**
   * The Assembly color of the button.
   */
  color: _propTypes2.default.string,
  /**
   * If `true`, the button will have (slightly rounded) corners instead of
   * the full curve they have by default.
   */
  corners: _propTypes2.default.bool,
  /**
   * If `true`, the element will be `block` displayed instead of `inline-block`.
   *
   * This is sometimes necessary to get your pixel-perfect layout, if you don't
   * want the extra line-height that wraps inline elements. Typically, you
   * should only set `block` to `true` if the parent element is controlling
   * width (in a layout that uses flexbox, absolute positioning, or floats).
   */
  block: _propTypes2.default.bool,
  /**
   * Is it disabled?
   */
  disabled: _propTypes2.default.bool,
  /**
   * An alternate component to render in the style of a button. If the value is
   * a string, it must refer to a DOM element, like `"div"`. Otherwise, it
   * can be a React component.
   */
  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
  /**
   * An object of props that you want to pass through to the element that
   * Button renders. This can be useful if you want to disable
   * the button, assign an ID for testing, add an ARIA attribute, toss in some
   * custom style properties, etc.
   */
  passthroughProps: _propTypes2.default.object
};

Button.defaultProps = {
  variant: 'primary',
  block: false,
  disabled: false
};

exports.default = Button;