'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _clipboardMin = require('clipboard/dist/clipboard.min.js');

var _clipboardMin2 = _interopRequireDefault(_clipboardMin);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _popover = require('../popover');

var _popover2 = _interopRequireDefault(_popover);

var _tooltip = require('../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FEEDBACK_TIME = 800;

/**
 * A button that, when clicked, copies the designated text to the clipboard.
 *
 * The static function `CopyButton.isCopySupported` returns a boolean
 * indicating whether the current browser will support automatic copying.
 * If it does not, you might want to hide your copy button and make sure
 * the user is able to manually select and copy the text.
 */

var CopyButton = function (_React$PureComponent) {
  (0, _inherits3.default)(CopyButton, _React$PureComponent);

  function CopyButton() {
    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CopyButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.state = {
      showingFeedback: false
    }, _this.handleCopyButtonClick = function () {
      // Clipboard.js attaches its own click handlers for copying
      var _this$props = _this.props,
          onCopy = _this$props.onCopy,
          text = _this$props.text;

      if (onCopy) {
        onCopy(text);
      }
      _this.showFeedback();
    }, _this.showFeedback = function () {
      _this.setState({ showingFeedback: true });
      _this.revertTimer = setTimeout(function () {
        _this.setState({ showingFeedback: false });
      }, FEEDBACK_TIME);
    }, _this.setContainer = function (element) {
      if (!element) return;
      var textEl = _this.props.textEl;

      _this.container = element;
      if (!textEl && _clipboardMin2.default.isSupported()) {
        _this.setClipboard(element);
      }
    }, _this.getContainer = function () {
      return _this.container;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  CopyButton.prototype.componentDidMount = function componentDidMount() {
    if (this.props.textEl && _clipboardMin2.default.isSupported()) {
      this.setClipboard(this.props.textEl);
    }
  };

  CopyButton.prototype.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.revertTimer);
    if (this.clipboard) {
      this.clipboard.destroy();
    }
  };

  CopyButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var copyAvailable = _clipboardMin2.default.isSupported();
    if (nextProps.textEl !== this.props.textEl && copyAvailable) {
      this.setClipboard(nextProps.textEl);
    }
    if (!copyAvailable && this.clipboard) {
      this.clipboard.destroy();
    }
  };

  CopyButton.prototype.setClipboard = function setClipboard(element) {
    this.clipboard = new _clipboardMin2.default(element, {
      // Setting the container is necessary for Clipboard to function within
      // focus traps, like in a Modal.
      container: element
    });
  };

  CopyButton.prototype.renderFeedbackPopover = function renderFeedbackPopover() {
    var state = this.state;

    if (!state.showingFeedback) {
      return null;
    }

    return _react2.default.createElement(
      _popover2.default
      // We don't need this one to be as accessible as a regular tooltip
      ,
      { getAnchorElement: this.getContainer,
        placement: 'top',
        alignment: 'center',
        hideWhenAnchorIsOffscreen: true,
        accessibleTitle: null,
        padding: 'small'
      },
      _react2.default.createElement(
        'div',
        { className: 'txt-s' },
        'Copied!'
      )
    );
  };

  CopyButton.prototype.render = function render() {
    var props = this.props,
        state = this.state;
    // don't render the button if you can't use it to copy,
    // or are in Node during a static build

    if (typeof document !== 'undefined' && !_clipboardMin2.default.isSupported()) {
      return null;
    }

    var iconName = state.showingFeedback ? 'check' : 'clipboard';
    var buttonClasses = (0, _classnames2.default)(props.className, {
      block: props.block
    });

    // data-clipboard-text and the container ref are used by clipboard.js
    // to copy text if you do not pass in a textEl as a prop.
    // Note that this wont have as nice a failure mode.
    return _react2.default.createElement(
      _tooltip2.default,
      {
        disabled: state.showingFeedback,
        content: 'Copy',
        block: props.block
      },
      _react2.default.createElement(
        'button',
        (0, _extends3.default)({
          type: 'button',
          className: buttonClasses
        }, props.passthroughProps, {
          ref: this.setContainer,
          'data-clipboard-text': props.text,
          onClick: this.handleCopyButtonClick
        }),
        _react2.default.createElement(_icon2.default, { name: iconName }),
        this.renderFeedbackPopover()
      )
    );
  };

  return CopyButton;
}(_react2.default.PureComponent);

exports.default = CopyButton;


CopyButton.propTypes = {
  /**
   * The text that will be copied when the button is clicked.
   */
  text: _propTypes2.default.string.isRequired,
  /**
   * Pass in an element containing text to copy instead of the raw text
   * to provide a better fallback, where the text is selected for you if
   * `execcopy` is not supported.
   */
  textEl: _propTypes2.default.object,
  /**
   * Invoked when the button is clicked.
   * Passed one argument: the `text` prop.
   */
  onCopy: _propTypes2.default.func,
  /**
   * If `true`, the element will be `block` displayed instead of `inline-block`.
   *
   * This is sometimes necessary to get your pixel-perfect layout, if you don't
   * want the extra line-height that wraps inline elements. Typically, you
   * should only set `block` to `true` if the parent element is controlling
   * width (in a layout that uses flexbox, absolute positioning, or floats).
   */
  block: _propTypes2.default.bool,
  /**
   * The `className` prop of the `<button>`.
   */
  className: _propTypes2.default.string,
  /**
   * An object of props that you want to pass through to the `<button>`.
   */
  passthroughProps: _propTypes2.default.object
};

CopyButton.defaultProps = {
  className: 'btn btn--xs py3 px3 round',
  block: false
};

CopyButton.isCopySupported = function () {
  return _clipboardMin2.default.isSupported();
};