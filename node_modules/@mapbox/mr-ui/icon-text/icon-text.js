'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Put an icon next to some text.
 *
 * The icon and text will be vertically centered, with standard spacing between.
 */
var IconText = function (_React$Component) {
  (0, _inherits3.default)(IconText, _React$Component);

  function IconText() {
    (0, _classCallCheck3.default)(this, IconText);
    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
  }

  IconText.prototype.renderIcon = function renderIcon(icon) {
    if (typeof icon === 'string') {
      return _react2.default.createElement(_icon2.default, { name: icon });
    }
    return icon;
  };

  IconText.prototype.render = function render() {
    var props = this.props;

    var spacer = props.gap === 'small' ? '3' : '6';

    var before = !props.iconBefore ? null : _react2.default.createElement(
      'span',
      { className: 'flex-child mr' + spacer },
      this.renderIcon(props.iconBefore)
    );

    var after = !props.iconAfter ? null : _react2.default.createElement(
      'span',
      { className: 'flex-child ml' + spacer },
      this.renderIcon(props.iconAfter)
    );

    return _react2.default.createElement(
      'span',
      { className: 'flex-parent flex-parent--center-cross' },
      before,
      _react2.default.createElement(
        'span',
        { className: 'flex-child' },
        props.children
      ),
      after
    );
  };

  return IconText;
}(_react2.default.Component);

IconText.propTypes = {
  /**
   * The text. A string is recommended, but you can put an element in here if
   * you think it's right. If you do, it should be inline-level,
   * using `<span>`s instead of `<div>`s.
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * The size of the gap between the text and the icon: `"small"` or `"large"`.
   */
  gap: _propTypes2.default.oneOf(['small', 'large']),
  /**
   * An icon to place before the text. If the value is a string, it should name an
   * Assembly icon. If you bring your own SVG or want finer-grained control over
   * how the Icon component is used, pass an element.
   */
  iconBefore: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),
  /**
   * An icon to place after the text. See details documented for `iconBefore`.
   */
  iconAfter: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string])
};

IconText.defaultProps = {
  gap: 'small'
};

exports.default = IconText;