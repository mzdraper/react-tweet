'use strict';

const addSvgReactTransformer = require('../add-svg-react-transformer');

jest.mock('@mapbox/svg-react-transformer-loader', () => jest.fn(), {
  virtual: true
});

describe('addSvgReactTransformer', () => {
  test('works without existing webpackLoaders', () => {
    const config = {};
    const result = addSvgReactTransformer(config);
    expect(result.webpackLoaders).toEqual([
      {
        test: /\.svg$/,
        use: {
          loader: '@mapbox/svg-react-transformer-loader',
          options: { template: 'fancy' }
        }
      }
    ]);
  });

  test('works with alternate template', () => {
    const config = {};
    const result = addSvgReactTransformer(config, 'default');
    expect(result.webpackLoaders).toEqual([
      {
        test: /\.svg$/,
        use: {
          loader: '@mapbox/svg-react-transformer-loader',
          options: { template: 'default' }
        }
      }
    ]);
  });

  test('works with existing webpackLoaders', () => {
    const config = {
      webpackLoaders: ['foo', 'bar']
    };
    const result = addSvgReactTransformer(config);
    expect(result.webpackLoaders).toEqual([
      'foo',
      'bar',
      {
        test: /\.svg$/,
        use: {
          loader: '@mapbox/svg-react-transformer-loader',
          options: { template: 'fancy' }
        }
      }
    ]);
  });

  test('returns a new object', () => {
    const config = {};
    const result = addSvgReactTransformer(config);
    expect(result).not.toBe(config);
  });
});
