'use strict';

const addMapboxAssemblyCss = require('../add-mapbox-assembly-css');

jest.mock(
  '@mapbox/mbx-assembly',
  () => {
    return {
      browsersList: 'mock-browsers-list',
      postcssPipeline: {
        plugins: 'mock-plugins'
      }
    };
  },
  { virtual: true }
);

jest.mock('../util/resolve', () => jest.fn());
const resolve = require('../util/resolve');

describe('addMapboxAssemblyCss', () => {
  beforeEach(() => {
    resolve.mockImplementation(name => {
      if (name === '@mapbox/mbx-assembly/dist/assembly.css') {
        return 'mock-css-path';
      } else {
        return require.resolve(name);
      }
    });
  });

  test('works without existing stylesheets', () => {
    const config = {};
    const result = addMapboxAssemblyCss(config);
    expect(result.browserslist).toBe('mock-browsers-list');
    expect(result.postcssPlugins).toBe('mock-plugins');
    expect(result.stylesheets).toEqual(['mock-css-path']);
  });

  test('works with existing stylesheets, prepending to list', () => {
    const config = {
      stylesheets: ['a.css', 'b.css']
    };
    const result = addMapboxAssemblyCss(config);
    expect(result.browserslist).toBe('mock-browsers-list');
    expect(result.postcssPlugins).toBe('mock-plugins');
    expect(result.stylesheets).toEqual(['mock-css-path', 'a.css', 'b.css']);
  });

  test('returns a new object', () => {
    const config = {};
    const result = addMapboxAssemblyCss(config);
    expect(result).not.toBe(config);
  });
});
