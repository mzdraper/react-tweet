'use strict';

const gitBranch = require('git-branch');
const addSiteOrigin = require('../add-site-origin');
const getDeployEnv = require('../util/get-deploy-env');
const constants = require('../constants');

jest.mock('git-branch', () => ({
  sync: jest.fn()
}));
jest.mock('../util/get-deploy-env', () => jest.fn());

describe('addSiteOrigin', () => {
  beforeEach(() => {
    getDeployEnv.mockReturnValue('staging');
  });

  test('works for staging', () => {
    getDeployEnv.mockReturnValue('staging');
    const result = addSiteOrigin({});
    expect(result.siteOrigin).toBe(constants.ORIGIN_STAGING);
  });

  test('works for production', () => {
    getDeployEnv.mockReturnValue('production');
    const result = addSiteOrigin({});
    expect(result.siteOrigin).toBe(constants.ORIGIN_PRODUCTION);
  });

  test('works for hey-pages', () => {
    getDeployEnv.mockReturnValue('production');
    gitBranch.sync.mockReturnValue('hey-pages');
    const result = addSiteOrigin({});
    expect(result.siteOrigin).toBe(constants.ORIGIN_HEY);
  });

  test('returns a new object', () => {
    const config = {};
    const result = addSiteOrigin(config);
    expect(result).not.toBe(config);
  });
});
